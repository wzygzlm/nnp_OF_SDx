-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a0_accumulateHW is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (15 downto 0);
    y : IN STD_LOGIC_VECTOR (15 downto 0);
    pol : IN STD_LOGIC;
    glPLSlices_0_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    glPLSlices_0_ce0 : OUT STD_LOGIC;
    glPLSlices_0_we0 : OUT STD_LOGIC;
    glPLSlices_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_1_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    glPLSlices_1_ce0 : OUT STD_LOGIC;
    glPLSlices_1_we0 : OUT STD_LOGIC;
    glPLSlices_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_2_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    glPLSlices_2_ce0 : OUT STD_LOGIC;
    glPLSlices_2_we0 : OUT STD_LOGIC;
    glPLSlices_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_3_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    glPLSlices_3_ce0 : OUT STD_LOGIC;
    glPLSlices_3_we0 : OUT STD_LOGIC;
    glPLSlices_3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_4_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    glPLSlices_4_ce0 : OUT STD_LOGIC;
    glPLSlices_4_we0 : OUT STD_LOGIC;
    glPLSlices_4_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_4_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_5_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    glPLSlices_5_ce0 : OUT STD_LOGIC;
    glPLSlices_5_we0 : OUT STD_LOGIC;
    glPLSlices_5_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_5_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_6_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    glPLSlices_6_ce0 : OUT STD_LOGIC;
    glPLSlices_6_we0 : OUT STD_LOGIC;
    glPLSlices_6_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_6_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_7_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    glPLSlices_7_ce0 : OUT STD_LOGIC;
    glPLSlices_7_we0 : OUT STD_LOGIC;
    glPLSlices_7_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_7_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_8_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    glPLSlices_8_ce0 : OUT STD_LOGIC;
    glPLSlices_8_we0 : OUT STD_LOGIC;
    glPLSlices_8_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_8_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_9_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    glPLSlices_9_ce0 : OUT STD_LOGIC;
    glPLSlices_9_we0 : OUT STD_LOGIC;
    glPLSlices_9_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_9_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_10_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    glPLSlices_10_ce0 : OUT STD_LOGIC;
    glPLSlices_10_we0 : OUT STD_LOGIC;
    glPLSlices_10_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_10_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_11_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    glPLSlices_11_ce0 : OUT STD_LOGIC;
    glPLSlices_11_we0 : OUT STD_LOGIC;
    glPLSlices_11_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_11_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_12_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    glPLSlices_12_ce0 : OUT STD_LOGIC;
    glPLSlices_12_we0 : OUT STD_LOGIC;
    glPLSlices_12_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_12_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_13_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    glPLSlices_13_ce0 : OUT STD_LOGIC;
    glPLSlices_13_we0 : OUT STD_LOGIC;
    glPLSlices_13_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_13_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_14_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    glPLSlices_14_ce0 : OUT STD_LOGIC;
    glPLSlices_14_we0 : OUT STD_LOGIC;
    glPLSlices_14_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_14_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_15_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    glPLSlices_15_ce0 : OUT STD_LOGIC;
    glPLSlices_15_we0 : OUT STD_LOGIC;
    glPLSlices_15_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_15_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of a0_accumulateHW is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv15_2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_const_lv15_3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000011";
    constant ap_const_lv15_4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_const_lv15_5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000101";
    constant ap_const_lv15_6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000110";
    constant ap_const_lv15_7 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000111";
    constant ap_const_lv15_8 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_const_lv15_9 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001001";
    constant ap_const_lv15_A : STD_LOGIC_VECTOR (14 downto 0) := "000000000001010";
    constant ap_const_lv15_B : STD_LOGIC_VECTOR (14 downto 0) := "000000000001011";
    constant ap_const_lv15_C : STD_LOGIC_VECTOR (14 downto 0) := "000000000001100";
    constant ap_const_lv15_D : STD_LOGIC_VECTOR (14 downto 0) := "000000000001101";
    constant ap_const_lv15_E : STD_LOGIC_VECTOR (14 downto 0) := "000000000001110";
    constant ap_const_lv15_F : STD_LOGIC_VECTOR (14 downto 0) := "000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_8889 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000100010001001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal pol_read_read_fu_92_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pol_read_reg_446 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal pol_read_reg_446_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pol_read_reg_446_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pol_read_reg_446_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pol_read_reg_446_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pol_read_reg_446_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pol_read_reg_446_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pol_read_reg_446_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pol_read_reg_446_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal pol_read_reg_446_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_302_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_fu_440_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_455 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_read_reg_460 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_read_reg_460_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal y_read_reg_460_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal y_read_reg_460_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal y_read_reg_460_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal y_read_reg_460_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal y_read_reg_460_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal y_read_reg_460_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal y_read_reg_460_pp0_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_reg_466 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_18_reg_466_pp0_iter1_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_18_reg_466_pp0_iter2_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_18_reg_466_pp0_iter3_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_18_reg_466_pp0_iter4_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_18_reg_466_pp0_iter5_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_18_reg_466_pp0_iter6_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_18_reg_466_pp0_iter7_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_18_reg_466_pp0_iter8_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_310_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal newIndex_reg_471 : STD_LOGIC_VECTOR (13 downto 0);
    signal arrayNo_fu_345_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal arrayNo_reg_476 : STD_LOGIC_VECTOR (14 downto 0);
    signal glPLSlices_0_addr_reg_481 : STD_LOGIC_VECTOR (12 downto 0);
    signal glPLSlices_1_addr_reg_486 : STD_LOGIC_VECTOR (12 downto 0);
    signal glPLSlices_10_addr_reg_491 : STD_LOGIC_VECTOR (12 downto 0);
    signal glPLSlices_11_addr_reg_496 : STD_LOGIC_VECTOR (12 downto 0);
    signal glPLSlices_12_addr_reg_501 : STD_LOGIC_VECTOR (12 downto 0);
    signal glPLSlices_13_addr_reg_506 : STD_LOGIC_VECTOR (12 downto 0);
    signal glPLSlices_14_addr_reg_511 : STD_LOGIC_VECTOR (12 downto 0);
    signal glPLSlices_15_addr_reg_516 : STD_LOGIC_VECTOR (12 downto 0);
    signal glPLSlices_2_addr_reg_521 : STD_LOGIC_VECTOR (12 downto 0);
    signal glPLSlices_3_addr_reg_526 : STD_LOGIC_VECTOR (12 downto 0);
    signal glPLSlices_4_addr_reg_531 : STD_LOGIC_VECTOR (12 downto 0);
    signal glPLSlices_5_addr_reg_536 : STD_LOGIC_VECTOR (12 downto 0);
    signal glPLSlices_6_addr_reg_541 : STD_LOGIC_VECTOR (12 downto 0);
    signal glPLSlices_7_addr_reg_546 : STD_LOGIC_VECTOR (12 downto 0);
    signal glPLSlices_8_addr_reg_551 : STD_LOGIC_VECTOR (12 downto 0);
    signal glPLSlices_9_addr_reg_556 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_port_reg_y : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_cast_fu_357_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_3_fu_418_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_310_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_fu_328_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_331_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_15_fu_325_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_19_fu_348_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_fu_339_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_20_fu_351_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_fu_380_p17 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_380_p18 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_fu_440_p0 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_fu_440_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_310_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_0to9 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to10 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_fu_440_p10 : STD_LOGIC_VECTOR (31 downto 0);

    component a0_parseEvents_urem_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component a0_parseEvents_mux_1cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component a0_parseEvents_mul_mdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    parseEvents_urem_bkb_U17 : component a0_parseEvents_urem_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 19,
        din0_WIDTH => 15,
        din1_WIDTH => 5,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_17_fu_302_p1,
        din1 => grp_fu_310_p1,
        ce => grp_fu_310_ce,
        dout => grp_fu_310_p2);

    parseEvents_mux_1cud_U18 : component a0_parseEvents_mux_1cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 8,
        din5_WIDTH => 8,
        din6_WIDTH => 8,
        din7_WIDTH => 8,
        din8_WIDTH => 8,
        din9_WIDTH => 8,
        din10_WIDTH => 8,
        din11_WIDTH => 8,
        din12_WIDTH => 8,
        din13_WIDTH => 8,
        din14_WIDTH => 8,
        din15_WIDTH => 8,
        din16_WIDTH => 16,
        dout_WIDTH => 8)
    port map (
        din0 => glPLSlices_0_q0,
        din1 => glPLSlices_1_q0,
        din2 => glPLSlices_2_q0,
        din3 => glPLSlices_3_q0,
        din4 => glPLSlices_4_q0,
        din5 => glPLSlices_5_q0,
        din6 => glPLSlices_6_q0,
        din7 => glPLSlices_7_q0,
        din8 => glPLSlices_8_q0,
        din9 => glPLSlices_9_q0,
        din10 => glPLSlices_10_q0,
        din11 => glPLSlices_11_q0,
        din12 => glPLSlices_12_q0,
        din13 => glPLSlices_13_q0,
        din14 => glPLSlices_14_q0,
        din15 => glPLSlices_15_q0,
        din16 => tmp_fu_380_p17,
        dout => tmp_fu_380_p18);

    parseEvents_mul_mdEe_U19 : component a0_parseEvents_mul_mdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 17,
        din1_WIDTH => 15,
        dout_WIDTH => 32)
    port map (
        din0 => mul_fu_440_p0,
        din1 => mul_fu_440_p1,
        dout => mul_fu_440_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                elsif (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_port_reg_y <= y;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (pol_read_reg_446_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                arrayNo_reg_476 <= arrayNo_fu_345_p1;
                glPLSlices_0_addr_reg_481 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
                glPLSlices_10_addr_reg_491 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
                glPLSlices_11_addr_reg_496 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
                glPLSlices_12_addr_reg_501 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
                glPLSlices_13_addr_reg_506 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
                glPLSlices_14_addr_reg_511 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
                glPLSlices_15_addr_reg_516 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
                glPLSlices_1_addr_reg_486 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
                glPLSlices_2_addr_reg_521 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
                glPLSlices_3_addr_reg_526 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
                glPLSlices_4_addr_reg_531 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
                glPLSlices_5_addr_reg_536 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
                glPLSlices_6_addr_reg_541 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
                glPLSlices_7_addr_reg_546 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
                glPLSlices_8_addr_reg_551 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
                glPLSlices_9_addr_reg_556 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (pol_read_read_fu_92_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_reg_455 <= mul_fu_440_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (pol_read_reg_446_pp0_iter8_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                newIndex_reg_471 <= grp_fu_310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                pol_read_reg_446 <= (0=>pol, others=>'-');
                pol_read_reg_446_pp0_iter1_reg <= pol_read_reg_446;
                pol_read_reg_446_pp0_iter2_reg <= pol_read_reg_446_pp0_iter1_reg;
                pol_read_reg_446_pp0_iter3_reg <= pol_read_reg_446_pp0_iter2_reg;
                pol_read_reg_446_pp0_iter4_reg <= pol_read_reg_446_pp0_iter3_reg;
                pol_read_reg_446_pp0_iter5_reg <= pol_read_reg_446_pp0_iter4_reg;
                pol_read_reg_446_pp0_iter6_reg <= pol_read_reg_446_pp0_iter5_reg;
                pol_read_reg_446_pp0_iter7_reg <= pol_read_reg_446_pp0_iter6_reg;
                pol_read_reg_446_pp0_iter8_reg <= pol_read_reg_446_pp0_iter7_reg;
                pol_read_reg_446_pp0_iter9_reg <= pol_read_reg_446_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (pol_read_reg_446 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_18_reg_466 <= mul_reg_455(31 downto 19);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_18_reg_466_pp0_iter1_reg <= tmp_18_reg_466;
                tmp_18_reg_466_pp0_iter2_reg <= tmp_18_reg_466_pp0_iter1_reg;
                tmp_18_reg_466_pp0_iter3_reg <= tmp_18_reg_466_pp0_iter2_reg;
                tmp_18_reg_466_pp0_iter4_reg <= tmp_18_reg_466_pp0_iter3_reg;
                tmp_18_reg_466_pp0_iter5_reg <= tmp_18_reg_466_pp0_iter4_reg;
                tmp_18_reg_466_pp0_iter6_reg <= tmp_18_reg_466_pp0_iter5_reg;
                tmp_18_reg_466_pp0_iter7_reg <= tmp_18_reg_466_pp0_iter6_reg;
                tmp_18_reg_466_pp0_iter8_reg <= tmp_18_reg_466_pp0_iter7_reg;
                y_read_reg_460 <= ap_port_reg_y;
                y_read_reg_460_pp0_iter1_reg <= y_read_reg_460;
                y_read_reg_460_pp0_iter2_reg <= y_read_reg_460_pp0_iter1_reg;
                y_read_reg_460_pp0_iter3_reg <= y_read_reg_460_pp0_iter2_reg;
                y_read_reg_460_pp0_iter4_reg <= y_read_reg_460_pp0_iter3_reg;
                y_read_reg_460_pp0_iter5_reg <= y_read_reg_460_pp0_iter4_reg;
                y_read_reg_460_pp0_iter6_reg <= y_read_reg_460_pp0_iter5_reg;
                y_read_reg_460_pp0_iter7_reg <= y_read_reg_460_pp0_iter6_reg;
                y_read_reg_460_pp0_iter8_reg <= y_read_reg_460_pp0_iter7_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_idle_pp0_1to10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to10 = ap_const_logic_1))) and (ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage1_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state10_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state20_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter10, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to9_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to9 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to10_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to10 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to9)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to9 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

        arrayNo_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_18_reg_466_pp0_iter8_reg),15));


    glPLSlices_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, glPLSlices_0_addr_reg_481, tmp_24_cast_fu_357_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_0_address0 <= glPLSlices_0_addr_reg_481;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            glPLSlices_0_address0 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
        else 
            glPLSlices_0_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    glPLSlices_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            glPLSlices_0_ce0 <= ap_const_logic_1;
        else 
            glPLSlices_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    glPLSlices_0_d0 <= tmp_3_fu_418_p2;

    glPLSlices_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, ap_ce, ap_block_pp0_stage0_11001, pol_read_reg_446_pp0_iter9_reg, arrayNo_reg_476)
    begin
        if (((ap_const_logic_1 = ap_ce) and (arrayNo_reg_476 = ap_const_lv15_0) and (pol_read_reg_446_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_0_we0 <= ap_const_logic_1;
        else 
            glPLSlices_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_10_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, glPLSlices_10_addr_reg_491, tmp_24_cast_fu_357_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_10_address0 <= glPLSlices_10_addr_reg_491;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            glPLSlices_10_address0 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
        else 
            glPLSlices_10_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    glPLSlices_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            glPLSlices_10_ce0 <= ap_const_logic_1;
        else 
            glPLSlices_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    glPLSlices_10_d0 <= tmp_3_fu_418_p2;

    glPLSlices_10_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, ap_ce, ap_block_pp0_stage0_11001, pol_read_reg_446_pp0_iter9_reg, arrayNo_reg_476)
    begin
        if (((ap_const_logic_1 = ap_ce) and (arrayNo_reg_476 = ap_const_lv15_A) and (pol_read_reg_446_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_10_we0 <= ap_const_logic_1;
        else 
            glPLSlices_10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_11_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, glPLSlices_11_addr_reg_496, tmp_24_cast_fu_357_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_11_address0 <= glPLSlices_11_addr_reg_496;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            glPLSlices_11_address0 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
        else 
            glPLSlices_11_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    glPLSlices_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            glPLSlices_11_ce0 <= ap_const_logic_1;
        else 
            glPLSlices_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    glPLSlices_11_d0 <= tmp_3_fu_418_p2;

    glPLSlices_11_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, ap_ce, ap_block_pp0_stage0_11001, pol_read_reg_446_pp0_iter9_reg, arrayNo_reg_476)
    begin
        if (((ap_const_logic_1 = ap_ce) and (arrayNo_reg_476 = ap_const_lv15_B) and (pol_read_reg_446_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_11_we0 <= ap_const_logic_1;
        else 
            glPLSlices_11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_12_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, glPLSlices_12_addr_reg_501, tmp_24_cast_fu_357_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_12_address0 <= glPLSlices_12_addr_reg_501;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            glPLSlices_12_address0 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
        else 
            glPLSlices_12_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    glPLSlices_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            glPLSlices_12_ce0 <= ap_const_logic_1;
        else 
            glPLSlices_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    glPLSlices_12_d0 <= tmp_3_fu_418_p2;

    glPLSlices_12_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, ap_ce, ap_block_pp0_stage0_11001, pol_read_reg_446_pp0_iter9_reg, arrayNo_reg_476)
    begin
        if (((ap_const_logic_1 = ap_ce) and (arrayNo_reg_476 = ap_const_lv15_C) and (pol_read_reg_446_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_12_we0 <= ap_const_logic_1;
        else 
            glPLSlices_12_we0 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_13_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, glPLSlices_13_addr_reg_506, tmp_24_cast_fu_357_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_13_address0 <= glPLSlices_13_addr_reg_506;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            glPLSlices_13_address0 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
        else 
            glPLSlices_13_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    glPLSlices_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            glPLSlices_13_ce0 <= ap_const_logic_1;
        else 
            glPLSlices_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    glPLSlices_13_d0 <= tmp_3_fu_418_p2;

    glPLSlices_13_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, ap_ce, ap_block_pp0_stage0_11001, pol_read_reg_446_pp0_iter9_reg, arrayNo_reg_476)
    begin
        if (((ap_const_logic_1 = ap_ce) and (arrayNo_reg_476 = ap_const_lv15_D) and (pol_read_reg_446_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_13_we0 <= ap_const_logic_1;
        else 
            glPLSlices_13_we0 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_14_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, glPLSlices_14_addr_reg_511, tmp_24_cast_fu_357_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_14_address0 <= glPLSlices_14_addr_reg_511;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            glPLSlices_14_address0 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
        else 
            glPLSlices_14_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    glPLSlices_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            glPLSlices_14_ce0 <= ap_const_logic_1;
        else 
            glPLSlices_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    glPLSlices_14_d0 <= tmp_3_fu_418_p2;

    glPLSlices_14_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, ap_ce, ap_block_pp0_stage0_11001, pol_read_reg_446_pp0_iter9_reg, arrayNo_reg_476)
    begin
        if (((ap_const_logic_1 = ap_ce) and (arrayNo_reg_476 = ap_const_lv15_E) and (pol_read_reg_446_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_14_we0 <= ap_const_logic_1;
        else 
            glPLSlices_14_we0 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_15_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, glPLSlices_15_addr_reg_516, tmp_24_cast_fu_357_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_15_address0 <= glPLSlices_15_addr_reg_516;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            glPLSlices_15_address0 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
        else 
            glPLSlices_15_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    glPLSlices_15_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            glPLSlices_15_ce0 <= ap_const_logic_1;
        else 
            glPLSlices_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    glPLSlices_15_d0 <= tmp_3_fu_418_p2;

    glPLSlices_15_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, ap_ce, ap_block_pp0_stage0_11001, pol_read_reg_446_pp0_iter9_reg, arrayNo_reg_476)
    begin
        if ((not((arrayNo_reg_476 = ap_const_lv15_E)) and not((arrayNo_reg_476 = ap_const_lv15_D)) and not((arrayNo_reg_476 = ap_const_lv15_C)) and not((arrayNo_reg_476 = ap_const_lv15_B)) and not((arrayNo_reg_476 = ap_const_lv15_A)) and not((arrayNo_reg_476 = ap_const_lv15_9)) and not((arrayNo_reg_476 = ap_const_lv15_8)) and not((arrayNo_reg_476 = ap_const_lv15_7)) and not((arrayNo_reg_476 = ap_const_lv15_6)) and not((arrayNo_reg_476 = ap_const_lv15_5)) and not((arrayNo_reg_476 = ap_const_lv15_4)) and not((arrayNo_reg_476 = ap_const_lv15_3)) and not((arrayNo_reg_476 = ap_const_lv15_2)) and not((arrayNo_reg_476 = ap_const_lv15_1)) and not((arrayNo_reg_476 = ap_const_lv15_0)) and (ap_const_logic_1 = ap_ce) and (pol_read_reg_446_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_15_we0 <= ap_const_logic_1;
        else 
            glPLSlices_15_we0 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, glPLSlices_1_addr_reg_486, tmp_24_cast_fu_357_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_1_address0 <= glPLSlices_1_addr_reg_486;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            glPLSlices_1_address0 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
        else 
            glPLSlices_1_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    glPLSlices_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            glPLSlices_1_ce0 <= ap_const_logic_1;
        else 
            glPLSlices_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    glPLSlices_1_d0 <= tmp_3_fu_418_p2;

    glPLSlices_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, ap_ce, ap_block_pp0_stage0_11001, pol_read_reg_446_pp0_iter9_reg, arrayNo_reg_476)
    begin
        if (((ap_const_logic_1 = ap_ce) and (arrayNo_reg_476 = ap_const_lv15_1) and (pol_read_reg_446_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_1_we0 <= ap_const_logic_1;
        else 
            glPLSlices_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, glPLSlices_2_addr_reg_521, tmp_24_cast_fu_357_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_2_address0 <= glPLSlices_2_addr_reg_521;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            glPLSlices_2_address0 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
        else 
            glPLSlices_2_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    glPLSlices_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            glPLSlices_2_ce0 <= ap_const_logic_1;
        else 
            glPLSlices_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    glPLSlices_2_d0 <= tmp_3_fu_418_p2;

    glPLSlices_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, ap_ce, ap_block_pp0_stage0_11001, pol_read_reg_446_pp0_iter9_reg, arrayNo_reg_476)
    begin
        if (((ap_const_logic_1 = ap_ce) and (arrayNo_reg_476 = ap_const_lv15_2) and (pol_read_reg_446_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_2_we0 <= ap_const_logic_1;
        else 
            glPLSlices_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_3_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, glPLSlices_3_addr_reg_526, tmp_24_cast_fu_357_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_3_address0 <= glPLSlices_3_addr_reg_526;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            glPLSlices_3_address0 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
        else 
            glPLSlices_3_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    glPLSlices_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            glPLSlices_3_ce0 <= ap_const_logic_1;
        else 
            glPLSlices_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    glPLSlices_3_d0 <= tmp_3_fu_418_p2;

    glPLSlices_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, ap_ce, ap_block_pp0_stage0_11001, pol_read_reg_446_pp0_iter9_reg, arrayNo_reg_476)
    begin
        if (((ap_const_logic_1 = ap_ce) and (arrayNo_reg_476 = ap_const_lv15_3) and (pol_read_reg_446_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_3_we0 <= ap_const_logic_1;
        else 
            glPLSlices_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_4_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, glPLSlices_4_addr_reg_531, tmp_24_cast_fu_357_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_4_address0 <= glPLSlices_4_addr_reg_531;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            glPLSlices_4_address0 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
        else 
            glPLSlices_4_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    glPLSlices_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            glPLSlices_4_ce0 <= ap_const_logic_1;
        else 
            glPLSlices_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    glPLSlices_4_d0 <= tmp_3_fu_418_p2;

    glPLSlices_4_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, ap_ce, ap_block_pp0_stage0_11001, pol_read_reg_446_pp0_iter9_reg, arrayNo_reg_476)
    begin
        if (((ap_const_logic_1 = ap_ce) and (arrayNo_reg_476 = ap_const_lv15_4) and (pol_read_reg_446_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_4_we0 <= ap_const_logic_1;
        else 
            glPLSlices_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_5_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, glPLSlices_5_addr_reg_536, tmp_24_cast_fu_357_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_5_address0 <= glPLSlices_5_addr_reg_536;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            glPLSlices_5_address0 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
        else 
            glPLSlices_5_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    glPLSlices_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            glPLSlices_5_ce0 <= ap_const_logic_1;
        else 
            glPLSlices_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    glPLSlices_5_d0 <= tmp_3_fu_418_p2;

    glPLSlices_5_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, ap_ce, ap_block_pp0_stage0_11001, pol_read_reg_446_pp0_iter9_reg, arrayNo_reg_476)
    begin
        if (((ap_const_logic_1 = ap_ce) and (arrayNo_reg_476 = ap_const_lv15_5) and (pol_read_reg_446_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_5_we0 <= ap_const_logic_1;
        else 
            glPLSlices_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_6_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, glPLSlices_6_addr_reg_541, tmp_24_cast_fu_357_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_6_address0 <= glPLSlices_6_addr_reg_541;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            glPLSlices_6_address0 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
        else 
            glPLSlices_6_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    glPLSlices_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            glPLSlices_6_ce0 <= ap_const_logic_1;
        else 
            glPLSlices_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    glPLSlices_6_d0 <= tmp_3_fu_418_p2;

    glPLSlices_6_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, ap_ce, ap_block_pp0_stage0_11001, pol_read_reg_446_pp0_iter9_reg, arrayNo_reg_476)
    begin
        if (((ap_const_logic_1 = ap_ce) and (arrayNo_reg_476 = ap_const_lv15_6) and (pol_read_reg_446_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_6_we0 <= ap_const_logic_1;
        else 
            glPLSlices_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_7_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, glPLSlices_7_addr_reg_546, tmp_24_cast_fu_357_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_7_address0 <= glPLSlices_7_addr_reg_546;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            glPLSlices_7_address0 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
        else 
            glPLSlices_7_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    glPLSlices_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            glPLSlices_7_ce0 <= ap_const_logic_1;
        else 
            glPLSlices_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    glPLSlices_7_d0 <= tmp_3_fu_418_p2;

    glPLSlices_7_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, ap_ce, ap_block_pp0_stage0_11001, pol_read_reg_446_pp0_iter9_reg, arrayNo_reg_476)
    begin
        if (((ap_const_logic_1 = ap_ce) and (arrayNo_reg_476 = ap_const_lv15_7) and (pol_read_reg_446_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_7_we0 <= ap_const_logic_1;
        else 
            glPLSlices_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_8_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, glPLSlices_8_addr_reg_551, tmp_24_cast_fu_357_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_8_address0 <= glPLSlices_8_addr_reg_551;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            glPLSlices_8_address0 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
        else 
            glPLSlices_8_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    glPLSlices_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            glPLSlices_8_ce0 <= ap_const_logic_1;
        else 
            glPLSlices_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    glPLSlices_8_d0 <= tmp_3_fu_418_p2;

    glPLSlices_8_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, ap_ce, ap_block_pp0_stage0_11001, pol_read_reg_446_pp0_iter9_reg, arrayNo_reg_476)
    begin
        if (((ap_const_logic_1 = ap_ce) and (arrayNo_reg_476 = ap_const_lv15_8) and (pol_read_reg_446_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_8_we0 <= ap_const_logic_1;
        else 
            glPLSlices_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_9_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, glPLSlices_9_addr_reg_556, tmp_24_cast_fu_357_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_9_address0 <= glPLSlices_9_addr_reg_556;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            glPLSlices_9_address0 <= tmp_24_cast_fu_357_p1(13 - 1 downto 0);
        else 
            glPLSlices_9_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    glPLSlices_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            glPLSlices_9_ce0 <= ap_const_logic_1;
        else 
            glPLSlices_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    glPLSlices_9_d0 <= tmp_3_fu_418_p2;

    glPLSlices_9_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, ap_ce, ap_block_pp0_stage0_11001, pol_read_reg_446_pp0_iter9_reg, arrayNo_reg_476)
    begin
        if (((ap_const_logic_1 = ap_ce) and (arrayNo_reg_476 = ap_const_lv15_9) and (pol_read_reg_446_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_9_we0 <= ap_const_logic_1;
        else 
            glPLSlices_9_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_310_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))))) then 
            grp_fu_310_ce <= ap_const_logic_1;
        else 
            grp_fu_310_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_310_p1 <= ap_const_lv15_F(5 - 1 downto 0);
    mul_fu_440_p0 <= ap_const_lv32_8889(17 - 1 downto 0);
    mul_fu_440_p1 <= mul_fu_440_p10(15 - 1 downto 0);
    mul_fu_440_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_302_p1),32));
    p_shl_cast_fu_331_p3 <= (tmp_16_fu_328_p1 & ap_const_lv4_0);
    pol_read_read_fu_92_p2 <= (0=>pol, others=>'-');
    tmp_15_fu_325_p1 <= y_read_reg_460_pp0_iter8_reg(14 - 1 downto 0);
    tmp_16_fu_328_p1 <= y_read_reg_460_pp0_iter8_reg(10 - 1 downto 0);
    tmp_17_fu_302_p1 <= x(15 - 1 downto 0);
    tmp_19_fu_348_p1 <= newIndex_reg_471(14 - 1 downto 0);
    tmp_20_fu_351_p2 <= std_logic_vector(unsigned(tmp_19_fu_348_p1) + unsigned(tmp_s_fu_339_p2));
        tmp_24_cast_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_20_fu_351_p2),32));

    tmp_3_fu_418_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(tmp_fu_380_p18));
    tmp_fu_380_p17 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayNo_reg_476),16));
    tmp_s_fu_339_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_331_p3) - unsigned(tmp_15_fu_325_p1));
end behav;
