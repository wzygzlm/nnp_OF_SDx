// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _a0_parseEvents_HH_
#define _a0_parseEvents_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "a0_resetCurrentSliceHW.h"
#include "a0_copyToPS.h"
#include "a0_parseEvents_glPLScud.h"
#include "a0_parseEvents_eventSlice_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_EVENTSLICE_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_EVENTSLICE_ID_WIDTH = 1,
         unsigned int C_M_AXI_EVENTSLICE_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_EVENTSLICE_DATA_WIDTH = 32,
         unsigned int C_M_AXI_EVENTSLICE_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_EVENTSLICE_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_EVENTSLICE_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_EVENTSLICE_BUSER_WIDTH = 1>
struct a0_parseEvents : public sc_module {
    // Port declarations 56
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_eventSlice_AWVALID;
    sc_in< sc_logic > m_axi_eventSlice_AWREADY;
    sc_out< sc_uint<C_M_AXI_EVENTSLICE_ADDR_WIDTH> > m_axi_eventSlice_AWADDR;
    sc_out< sc_uint<C_M_AXI_EVENTSLICE_ID_WIDTH> > m_axi_eventSlice_AWID;
    sc_out< sc_lv<8> > m_axi_eventSlice_AWLEN;
    sc_out< sc_lv<3> > m_axi_eventSlice_AWSIZE;
    sc_out< sc_lv<2> > m_axi_eventSlice_AWBURST;
    sc_out< sc_lv<2> > m_axi_eventSlice_AWLOCK;
    sc_out< sc_lv<4> > m_axi_eventSlice_AWCACHE;
    sc_out< sc_lv<3> > m_axi_eventSlice_AWPROT;
    sc_out< sc_lv<4> > m_axi_eventSlice_AWQOS;
    sc_out< sc_lv<4> > m_axi_eventSlice_AWREGION;
    sc_out< sc_uint<C_M_AXI_EVENTSLICE_AWUSER_WIDTH> > m_axi_eventSlice_AWUSER;
    sc_out< sc_logic > m_axi_eventSlice_WVALID;
    sc_in< sc_logic > m_axi_eventSlice_WREADY;
    sc_out< sc_uint<C_M_AXI_EVENTSLICE_DATA_WIDTH> > m_axi_eventSlice_WDATA;
    sc_out< sc_uint<C_M_AXI_EVENTSLICE_DATA_WIDTH/8> > m_axi_eventSlice_WSTRB;
    sc_out< sc_logic > m_axi_eventSlice_WLAST;
    sc_out< sc_uint<C_M_AXI_EVENTSLICE_ID_WIDTH> > m_axi_eventSlice_WID;
    sc_out< sc_uint<C_M_AXI_EVENTSLICE_WUSER_WIDTH> > m_axi_eventSlice_WUSER;
    sc_out< sc_logic > m_axi_eventSlice_ARVALID;
    sc_in< sc_logic > m_axi_eventSlice_ARREADY;
    sc_out< sc_uint<C_M_AXI_EVENTSLICE_ADDR_WIDTH> > m_axi_eventSlice_ARADDR;
    sc_out< sc_uint<C_M_AXI_EVENTSLICE_ID_WIDTH> > m_axi_eventSlice_ARID;
    sc_out< sc_lv<8> > m_axi_eventSlice_ARLEN;
    sc_out< sc_lv<3> > m_axi_eventSlice_ARSIZE;
    sc_out< sc_lv<2> > m_axi_eventSlice_ARBURST;
    sc_out< sc_lv<2> > m_axi_eventSlice_ARLOCK;
    sc_out< sc_lv<4> > m_axi_eventSlice_ARCACHE;
    sc_out< sc_lv<3> > m_axi_eventSlice_ARPROT;
    sc_out< sc_lv<4> > m_axi_eventSlice_ARQOS;
    sc_out< sc_lv<4> > m_axi_eventSlice_ARREGION;
    sc_out< sc_uint<C_M_AXI_EVENTSLICE_ARUSER_WIDTH> > m_axi_eventSlice_ARUSER;
    sc_in< sc_logic > m_axi_eventSlice_RVALID;
    sc_out< sc_logic > m_axi_eventSlice_RREADY;
    sc_in< sc_uint<C_M_AXI_EVENTSLICE_DATA_WIDTH> > m_axi_eventSlice_RDATA;
    sc_in< sc_logic > m_axi_eventSlice_RLAST;
    sc_in< sc_uint<C_M_AXI_EVENTSLICE_ID_WIDTH> > m_axi_eventSlice_RID;
    sc_in< sc_uint<C_M_AXI_EVENTSLICE_RUSER_WIDTH> > m_axi_eventSlice_RUSER;
    sc_in< sc_lv<2> > m_axi_eventSlice_RRESP;
    sc_in< sc_logic > m_axi_eventSlice_BVALID;
    sc_out< sc_logic > m_axi_eventSlice_BREADY;
    sc_in< sc_lv<2> > m_axi_eventSlice_BRESP;
    sc_in< sc_uint<C_M_AXI_EVENTSLICE_ID_WIDTH> > m_axi_eventSlice_BID;
    sc_in< sc_uint<C_M_AXI_EVENTSLICE_BUSER_WIDTH> > m_axi_eventSlice_BUSER;
    sc_in< sc_lv<32> > data_dout;
    sc_in< sc_logic > data_empty_n;
    sc_out< sc_logic > data_read;
    sc_in< sc_lv<32> > eventsArraySize;
    sc_in< sc_lv<32> > eventSlice_offset;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const1;
    sc_signal< sc_lv<32> > ap_var_for_const2;
    sc_signal< sc_lv<1> > ap_var_for_const3;
    sc_signal< sc_lv<8> > ap_var_for_const7;
    sc_signal< sc_lv<4> > ap_var_for_const6;
    sc_signal< sc_lv<3> > ap_var_for_const4;
    sc_signal< sc_lv<2> > ap_var_for_const5;


    // Module declarations
    a0_parseEvents(sc_module_name name);
    SC_HAS_PROCESS(a0_parseEvents);

    ~a0_parseEvents();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    a0_parseEvents_glPLScud* glPLSlices_U;
    a0_parseEvents_eventSlice_m_axi<0,8,32,5,16,16,16,16,C_M_AXI_EVENTSLICE_ID_WIDTH,C_M_AXI_EVENTSLICE_ADDR_WIDTH,C_M_AXI_EVENTSLICE_DATA_WIDTH,C_M_AXI_EVENTSLICE_AWUSER_WIDTH,C_M_AXI_EVENTSLICE_ARUSER_WIDTH,C_M_AXI_EVENTSLICE_WUSER_WIDTH,C_M_AXI_EVENTSLICE_RUSER_WIDTH,C_M_AXI_EVENTSLICE_BUSER_WIDTH,C_M_AXI_EVENTSLICE_USER_VALUE,C_M_AXI_EVENTSLICE_PROT_VALUE,C_M_AXI_EVENTSLICE_CACHE_VALUE>* parseEvents_eventSlice_m_axi_U;
    a0_resetCurrentSliceHW* grp_resetCurrentSliceHW_fu_144;
    a0_copyToPS* grp_copyToPS_fu_150;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<17> > glPLSlices_address0;
    sc_signal< sc_logic > glPLSlices_ce0;
    sc_signal< sc_logic > glPLSlices_we0;
    sc_signal< sc_lv<8> > glPLSlices_d0;
    sc_signal< sc_lv<8> > glPLSlices_q0;
    sc_signal< sc_logic > glPLSlices_ce1;
    sc_signal< sc_logic > glPLSlices_we1;
    sc_signal< sc_logic > data_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<1> > tmp_8_reg_343;
    sc_signal< sc_logic > eventSlice_AWVALID;
    sc_signal< sc_logic > eventSlice_AWREADY;
    sc_signal< sc_logic > eventSlice_WVALID;
    sc_signal< sc_logic > eventSlice_WREADY;
    sc_signal< sc_logic > eventSlice_ARREADY;
    sc_signal< sc_logic > eventSlice_RVALID;
    sc_signal< sc_lv<8> > eventSlice_RDATA;
    sc_signal< sc_logic > eventSlice_RLAST;
    sc_signal< sc_lv<1> > eventSlice_RID;
    sc_signal< sc_lv<1> > eventSlice_RUSER;
    sc_signal< sc_lv<2> > eventSlice_RRESP;
    sc_signal< sc_logic > eventSlice_BVALID;
    sc_signal< sc_logic > eventSlice_BREADY;
    sc_signal< sc_lv<2> > eventSlice_BRESP;
    sc_signal< sc_lv<1> > eventSlice_BID;
    sc_signal< sc_lv<1> > eventSlice_BUSER;
    sc_signal< sc_lv<32> > i_reg_132;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > grp_resetCurrentSliceHW_fu_144_ap_idle;
    sc_signal< sc_logic > grp_resetCurrentSliceHW_fu_144_ap_ready;
    sc_signal< sc_logic > grp_resetCurrentSliceHW_fu_144_ap_done;
    sc_signal< sc_lv<32> > tmp_7_fu_235_p3;
    sc_signal< sc_lv<32> > tmp_7_reg_338;
    sc_signal< sc_lv<1> > tmp_8_fu_243_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<32> > data_read_reg_347;
    sc_signal< bool > ap_block_state4_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state6_pp0_stage1_iter1;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<1> > tmp_9_reg_354;
    sc_signal< sc_lv<32> > i_2_fu_256_p2;
    sc_signal< sc_lv<32> > i_2_reg_358;
    sc_signal< sc_lv<17> > glPLSlices_addr_reg_363;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_logic > grp_resetCurrentSliceHW_fu_144_ap_start;
    sc_signal< sc_lv<17> > grp_resetCurrentSliceHW_fu_144_glPLSlices_address0;
    sc_signal< sc_logic > grp_resetCurrentSliceHW_fu_144_glPLSlices_ce0;
    sc_signal< sc_logic > grp_resetCurrentSliceHW_fu_144_glPLSlices_we0;
    sc_signal< sc_lv<8> > grp_resetCurrentSliceHW_fu_144_glPLSlices_d0;
    sc_signal< sc_lv<17> > grp_resetCurrentSliceHW_fu_144_glPLSlices_address1;
    sc_signal< sc_logic > grp_resetCurrentSliceHW_fu_144_glPLSlices_ce1;
    sc_signal< sc_logic > grp_resetCurrentSliceHW_fu_144_glPLSlices_we1;
    sc_signal< sc_lv<8> > grp_resetCurrentSliceHW_fu_144_glPLSlices_d1;
    sc_signal< sc_logic > grp_copyToPS_fu_150_ap_start;
    sc_signal< sc_logic > grp_copyToPS_fu_150_ap_done;
    sc_signal< sc_logic > grp_copyToPS_fu_150_ap_idle;
    sc_signal< sc_logic > grp_copyToPS_fu_150_ap_ready;
    sc_signal< sc_logic > grp_copyToPS_fu_150_m_axi_eventSlice_AWVALID;
    sc_signal< sc_lv<32> > grp_copyToPS_fu_150_m_axi_eventSlice_AWADDR;
    sc_signal< sc_lv<1> > grp_copyToPS_fu_150_m_axi_eventSlice_AWID;
    sc_signal< sc_lv<32> > grp_copyToPS_fu_150_m_axi_eventSlice_AWLEN;
    sc_signal< sc_lv<3> > grp_copyToPS_fu_150_m_axi_eventSlice_AWSIZE;
    sc_signal< sc_lv<2> > grp_copyToPS_fu_150_m_axi_eventSlice_AWBURST;
    sc_signal< sc_lv<2> > grp_copyToPS_fu_150_m_axi_eventSlice_AWLOCK;
    sc_signal< sc_lv<4> > grp_copyToPS_fu_150_m_axi_eventSlice_AWCACHE;
    sc_signal< sc_lv<3> > grp_copyToPS_fu_150_m_axi_eventSlice_AWPROT;
    sc_signal< sc_lv<4> > grp_copyToPS_fu_150_m_axi_eventSlice_AWQOS;
    sc_signal< sc_lv<4> > grp_copyToPS_fu_150_m_axi_eventSlice_AWREGION;
    sc_signal< sc_lv<1> > grp_copyToPS_fu_150_m_axi_eventSlice_AWUSER;
    sc_signal< sc_logic > grp_copyToPS_fu_150_m_axi_eventSlice_WVALID;
    sc_signal< sc_lv<8> > grp_copyToPS_fu_150_m_axi_eventSlice_WDATA;
    sc_signal< sc_lv<1> > grp_copyToPS_fu_150_m_axi_eventSlice_WSTRB;
    sc_signal< sc_logic > grp_copyToPS_fu_150_m_axi_eventSlice_WLAST;
    sc_signal< sc_lv<1> > grp_copyToPS_fu_150_m_axi_eventSlice_WID;
    sc_signal< sc_lv<1> > grp_copyToPS_fu_150_m_axi_eventSlice_WUSER;
    sc_signal< sc_logic > grp_copyToPS_fu_150_m_axi_eventSlice_ARVALID;
    sc_signal< sc_lv<32> > grp_copyToPS_fu_150_m_axi_eventSlice_ARADDR;
    sc_signal< sc_lv<1> > grp_copyToPS_fu_150_m_axi_eventSlice_ARID;
    sc_signal< sc_lv<32> > grp_copyToPS_fu_150_m_axi_eventSlice_ARLEN;
    sc_signal< sc_lv<3> > grp_copyToPS_fu_150_m_axi_eventSlice_ARSIZE;
    sc_signal< sc_lv<2> > grp_copyToPS_fu_150_m_axi_eventSlice_ARBURST;
    sc_signal< sc_lv<2> > grp_copyToPS_fu_150_m_axi_eventSlice_ARLOCK;
    sc_signal< sc_lv<4> > grp_copyToPS_fu_150_m_axi_eventSlice_ARCACHE;
    sc_signal< sc_lv<3> > grp_copyToPS_fu_150_m_axi_eventSlice_ARPROT;
    sc_signal< sc_lv<4> > grp_copyToPS_fu_150_m_axi_eventSlice_ARQOS;
    sc_signal< sc_lv<4> > grp_copyToPS_fu_150_m_axi_eventSlice_ARREGION;
    sc_signal< sc_lv<1> > grp_copyToPS_fu_150_m_axi_eventSlice_ARUSER;
    sc_signal< sc_logic > grp_copyToPS_fu_150_m_axi_eventSlice_RREADY;
    sc_signal< sc_logic > grp_copyToPS_fu_150_m_axi_eventSlice_BREADY;
    sc_signal< sc_lv<17> > grp_copyToPS_fu_150_glPLSlices_address0;
    sc_signal< sc_logic > grp_copyToPS_fu_150_glPLSlices_ce0;
    sc_signal< sc_lv<32> > ap_phi_mux_i_phi_fu_136_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > grp_resetCurrentSliceHW_fu_144_ap_start_reg;
    sc_signal< sc_logic > grp_copyToPS_fu_150_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<32> > tmp_250_cast_fu_321_p1;
    sc_signal< sc_lv<8> > tmp_3_i_fu_326_p2;
    sc_signal< sc_lv<32> > tmp_fu_159_p2;
    sc_signal< sc_lv<32> > tmp_op_op9_fu_173_p2;
    sc_signal< sc_lv<32> > p_neg_fu_187_p2;
    sc_signal< sc_lv<31> > p_lshr_fu_193_p4;
    sc_signal< sc_lv<1> > tmp_3_fu_179_p3;
    sc_signal< sc_lv<31> > p_neg_t_fu_203_p2;
    sc_signal< sc_lv<31> > tmp_4_fu_209_p4;
    sc_signal< sc_lv<1> > tmp_1_fu_165_p3;
    sc_signal< sc_lv<31> > tmp_5_fu_219_p3;
    sc_signal< sc_lv<31> > tmp_6_fu_227_p3;
    sc_signal< sc_lv<15> > tmp_10_fu_262_p4;
    sc_signal< sc_lv<10> > tmp_11_fu_275_p4;
    sc_signal< sc_lv<14> > tmp_12_fu_292_p4;
    sc_signal< sc_lv<18> > p_shl_cast_fu_284_p3;
    sc_signal< sc_lv<18> > p_shl3_cast_fu_301_p3;
    sc_signal< sc_lv<18> > tmp_i1_cast_fu_271_p1;
    sc_signal< sc_lv<18> > tmp_s_fu_309_p2;
    sc_signal< sc_lv<18> > tmp_242_fu_315_p2;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_pp0_stage0;
    static const sc_lv<6> ap_ST_fsm_pp0_stage1;
    static const sc_lv<6> ap_ST_fsm_state7;
    static const sc_lv<6> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const int C_M_AXI_EVENTSLICE_USER_VALUE;
    static const int C_M_AXI_EVENTSLICE_PROT_VALUE;
    static const int C_M_AXI_EVENTSLICE_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_FFFFFFFF;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const7();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const5();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage1_iter0();
    void thread_ap_block_state5_pp0_stage0_iter1();
    void thread_ap_block_state6_pp0_stage1_iter1();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_phi_fu_136_p4();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_data_blk_n();
    void thread_data_read();
    void thread_eventSlice_AWVALID();
    void thread_eventSlice_BREADY();
    void thread_eventSlice_WVALID();
    void thread_glPLSlices_address0();
    void thread_glPLSlices_ce0();
    void thread_glPLSlices_ce1();
    void thread_glPLSlices_d0();
    void thread_glPLSlices_we0();
    void thread_glPLSlices_we1();
    void thread_grp_copyToPS_fu_150_ap_start();
    void thread_grp_resetCurrentSliceHW_fu_144_ap_start();
    void thread_i_2_fu_256_p2();
    void thread_p_lshr_fu_193_p4();
    void thread_p_neg_fu_187_p2();
    void thread_p_neg_t_fu_203_p2();
    void thread_p_shl3_cast_fu_301_p3();
    void thread_p_shl_cast_fu_284_p3();
    void thread_tmp_10_fu_262_p4();
    void thread_tmp_11_fu_275_p4();
    void thread_tmp_12_fu_292_p4();
    void thread_tmp_1_fu_165_p3();
    void thread_tmp_242_fu_315_p2();
    void thread_tmp_250_cast_fu_321_p1();
    void thread_tmp_3_fu_179_p3();
    void thread_tmp_3_i_fu_326_p2();
    void thread_tmp_4_fu_209_p4();
    void thread_tmp_5_fu_219_p3();
    void thread_tmp_6_fu_227_p3();
    void thread_tmp_7_fu_235_p3();
    void thread_tmp_8_fu_243_p2();
    void thread_tmp_fu_159_p2();
    void thread_tmp_i1_cast_fu_271_p1();
    void thread_tmp_op_op9_fu_173_p2();
    void thread_tmp_s_fu_309_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
