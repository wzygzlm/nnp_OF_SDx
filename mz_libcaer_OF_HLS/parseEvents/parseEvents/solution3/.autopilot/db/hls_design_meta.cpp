#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_start", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_done", 1, hls_out, -1, "", "", 1),
	Port_Property("ap_idle", 1, hls_out, -1, "", "", 1),
	Port_Property("ap_ready", 1, hls_out, -1, "", "", 1),
	Port_Property("m_axi_eventSlice_AWVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_eventSlice_AWREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_eventSlice_AWADDR", 32, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_eventSlice_AWID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_eventSlice_AWLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_eventSlice_AWSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_eventSlice_AWBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_eventSlice_AWLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_eventSlice_AWCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_eventSlice_AWPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_eventSlice_AWQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_eventSlice_AWREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_eventSlice_AWUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_eventSlice_WVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_eventSlice_WREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_eventSlice_WDATA", 32, hls_out, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_eventSlice_WSTRB", 4, hls_out, 0, "m_axi", "STRB", 1),
	Port_Property("m_axi_eventSlice_WLAST", 1, hls_out, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_eventSlice_WID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_eventSlice_WUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_eventSlice_ARVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_eventSlice_ARREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_eventSlice_ARADDR", 32, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_eventSlice_ARID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_eventSlice_ARLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_eventSlice_ARSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_eventSlice_ARBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_eventSlice_ARLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_eventSlice_ARCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_eventSlice_ARPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_eventSlice_ARQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_eventSlice_ARREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_eventSlice_ARUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_eventSlice_RVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_eventSlice_RREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_eventSlice_RDATA", 32, hls_in, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_eventSlice_RLAST", 1, hls_in, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_eventSlice_RID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_eventSlice_RUSER", 1, hls_in, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_eventSlice_RRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_eventSlice_BVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_eventSlice_BREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_eventSlice_BRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_eventSlice_BID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_eventSlice_BUSER", 1, hls_in, 0, "m_axi", "USER", 1),
	Port_Property("data_dout", 32, hls_in, 1, "ap_fifo", "fifo_data", 1),
	Port_Property("data_empty_n", 1, hls_in, 1, "ap_fifo", "fifo_status", 1),
	Port_Property("data_read", 1, hls_out, 1, "ap_fifo", "fifo_update", 1),
	Port_Property("eventsArraySize", 32, hls_in, 2, "ap_none", "in_data", 1),
	Port_Property("eventSlice_offset", 32, hls_in, 3, "ap_none", "in_data", 1),
};
const char* HLS_Design_Meta::dut_name = "parseEvents";
