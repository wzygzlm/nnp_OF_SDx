// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module a0_copyToPS (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_eventSlice_AWVALID,
        m_axi_eventSlice_AWREADY,
        m_axi_eventSlice_AWADDR,
        m_axi_eventSlice_AWID,
        m_axi_eventSlice_AWLEN,
        m_axi_eventSlice_AWSIZE,
        m_axi_eventSlice_AWBURST,
        m_axi_eventSlice_AWLOCK,
        m_axi_eventSlice_AWCACHE,
        m_axi_eventSlice_AWPROT,
        m_axi_eventSlice_AWQOS,
        m_axi_eventSlice_AWREGION,
        m_axi_eventSlice_AWUSER,
        m_axi_eventSlice_WVALID,
        m_axi_eventSlice_WREADY,
        m_axi_eventSlice_WDATA,
        m_axi_eventSlice_WSTRB,
        m_axi_eventSlice_WLAST,
        m_axi_eventSlice_WID,
        m_axi_eventSlice_WUSER,
        m_axi_eventSlice_ARVALID,
        m_axi_eventSlice_ARREADY,
        m_axi_eventSlice_ARADDR,
        m_axi_eventSlice_ARID,
        m_axi_eventSlice_ARLEN,
        m_axi_eventSlice_ARSIZE,
        m_axi_eventSlice_ARBURST,
        m_axi_eventSlice_ARLOCK,
        m_axi_eventSlice_ARCACHE,
        m_axi_eventSlice_ARPROT,
        m_axi_eventSlice_ARQOS,
        m_axi_eventSlice_ARREGION,
        m_axi_eventSlice_ARUSER,
        m_axi_eventSlice_RVALID,
        m_axi_eventSlice_RREADY,
        m_axi_eventSlice_RDATA,
        m_axi_eventSlice_RLAST,
        m_axi_eventSlice_RID,
        m_axi_eventSlice_RUSER,
        m_axi_eventSlice_RRESP,
        m_axi_eventSlice_BVALID,
        m_axi_eventSlice_BREADY,
        m_axi_eventSlice_BRESP,
        m_axi_eventSlice_BID,
        m_axi_eventSlice_BUSER,
        eventSlice_offset,
        glPLSlices_0_address0,
        glPLSlices_0_ce0,
        glPLSlices_0_q0,
        glPLSlices_1_address0,
        glPLSlices_1_ce0,
        glPLSlices_1_q0,
        glPLSlices_2_address0,
        glPLSlices_2_ce0,
        glPLSlices_2_q0,
        glPLSlices_3_address0,
        glPLSlices_3_ce0,
        glPLSlices_3_q0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state29 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_eventSlice_AWVALID;
input   m_axi_eventSlice_AWREADY;
output  [31:0] m_axi_eventSlice_AWADDR;
output  [0:0] m_axi_eventSlice_AWID;
output  [31:0] m_axi_eventSlice_AWLEN;
output  [2:0] m_axi_eventSlice_AWSIZE;
output  [1:0] m_axi_eventSlice_AWBURST;
output  [1:0] m_axi_eventSlice_AWLOCK;
output  [3:0] m_axi_eventSlice_AWCACHE;
output  [2:0] m_axi_eventSlice_AWPROT;
output  [3:0] m_axi_eventSlice_AWQOS;
output  [3:0] m_axi_eventSlice_AWREGION;
output  [0:0] m_axi_eventSlice_AWUSER;
output   m_axi_eventSlice_WVALID;
input   m_axi_eventSlice_WREADY;
output  [7:0] m_axi_eventSlice_WDATA;
output  [0:0] m_axi_eventSlice_WSTRB;
output   m_axi_eventSlice_WLAST;
output  [0:0] m_axi_eventSlice_WID;
output  [0:0] m_axi_eventSlice_WUSER;
output   m_axi_eventSlice_ARVALID;
input   m_axi_eventSlice_ARREADY;
output  [31:0] m_axi_eventSlice_ARADDR;
output  [0:0] m_axi_eventSlice_ARID;
output  [31:0] m_axi_eventSlice_ARLEN;
output  [2:0] m_axi_eventSlice_ARSIZE;
output  [1:0] m_axi_eventSlice_ARBURST;
output  [1:0] m_axi_eventSlice_ARLOCK;
output  [3:0] m_axi_eventSlice_ARCACHE;
output  [2:0] m_axi_eventSlice_ARPROT;
output  [3:0] m_axi_eventSlice_ARQOS;
output  [3:0] m_axi_eventSlice_ARREGION;
output  [0:0] m_axi_eventSlice_ARUSER;
input   m_axi_eventSlice_RVALID;
output   m_axi_eventSlice_RREADY;
input  [7:0] m_axi_eventSlice_RDATA;
input   m_axi_eventSlice_RLAST;
input  [0:0] m_axi_eventSlice_RID;
input  [0:0] m_axi_eventSlice_RUSER;
input  [1:0] m_axi_eventSlice_RRESP;
input   m_axi_eventSlice_BVALID;
output   m_axi_eventSlice_BREADY;
input  [1:0] m_axi_eventSlice_BRESP;
input  [0:0] m_axi_eventSlice_BID;
input  [0:0] m_axi_eventSlice_BUSER;
input  [31:0] eventSlice_offset;
output  [14:0] glPLSlices_0_address0;
output   glPLSlices_0_ce0;
input  [7:0] glPLSlices_0_q0;
output  [14:0] glPLSlices_1_address0;
output   glPLSlices_1_ce0;
input  [7:0] glPLSlices_1_q0;
output  [14:0] glPLSlices_2_address0;
output   glPLSlices_2_ce0;
input  [7:0] glPLSlices_2_q0;
output  [14:0] glPLSlices_3_address0;
output   glPLSlices_3_ce0;
input  [7:0] glPLSlices_3_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_eventSlice_AWVALID;
reg m_axi_eventSlice_WVALID;
reg m_axi_eventSlice_BREADY;
reg glPLSlices_0_ce0;
reg glPLSlices_1_ce0;
reg glPLSlices_2_ce0;
reg glPLSlices_3_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    eventSlice_blk_n_AW;
reg    ap_enable_reg_pp0_iter20;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_16_reg_523;
reg    eventSlice_blk_n_W;
reg    ap_enable_reg_pp0_iter21;
reg   [0:0] exitcond_flatten_reg_454;
reg   [0:0] exitcond_flatten_reg_454_pp0_iter20_reg;
reg    eventSlice_blk_n_B;
reg    ap_enable_reg_pp0_iter26;
reg   [0:0] tmp_18_reg_527;
reg   [0:0] tmp_18_reg_527_pp0_iter25_reg;
reg   [15:0] indvar_flatten_reg_168;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
wire    ap_block_state19_pp0_stage0_iter17;
wire    ap_block_state20_pp0_stage0_iter18;
wire    ap_block_state21_pp0_stage0_iter19;
wire    ap_block_state22_pp0_stage0_iter20;
reg    ap_sig_ioackin_m_axi_eventSlice_AWREADY;
reg    ap_block_state22_io;
wire    ap_block_state23_pp0_stage0_iter21;
reg    ap_sig_ioackin_m_axi_eventSlice_WREADY;
reg    ap_block_state23_io;
wire    ap_block_state24_pp0_stage0_iter22;
wire    ap_block_state25_pp0_stage0_iter23;
wire    ap_block_state26_pp0_stage0_iter24;
wire    ap_block_state27_pp0_stage0_iter25;
reg    ap_block_state28_pp0_stage0_iter26;
reg    ap_block_pp0_stage0_11001;
reg   [7:0] i_reg_180;
reg   [7:0] j_reg_191;
wire   [0:0] exitcond_flatten_fu_232_p2;
reg   [0:0] exitcond_flatten_reg_454_pp0_iter1_reg;
reg   [0:0] exitcond_flatten_reg_454_pp0_iter2_reg;
reg   [0:0] exitcond_flatten_reg_454_pp0_iter3_reg;
reg   [0:0] exitcond_flatten_reg_454_pp0_iter4_reg;
reg   [0:0] exitcond_flatten_reg_454_pp0_iter5_reg;
reg   [0:0] exitcond_flatten_reg_454_pp0_iter6_reg;
reg   [0:0] exitcond_flatten_reg_454_pp0_iter7_reg;
reg   [0:0] exitcond_flatten_reg_454_pp0_iter8_reg;
reg   [0:0] exitcond_flatten_reg_454_pp0_iter9_reg;
reg   [0:0] exitcond_flatten_reg_454_pp0_iter10_reg;
reg   [0:0] exitcond_flatten_reg_454_pp0_iter11_reg;
reg   [0:0] exitcond_flatten_reg_454_pp0_iter12_reg;
reg   [0:0] exitcond_flatten_reg_454_pp0_iter13_reg;
reg   [0:0] exitcond_flatten_reg_454_pp0_iter14_reg;
reg   [0:0] exitcond_flatten_reg_454_pp0_iter15_reg;
reg   [0:0] exitcond_flatten_reg_454_pp0_iter16_reg;
reg   [0:0] exitcond_flatten_reg_454_pp0_iter17_reg;
reg   [0:0] exitcond_flatten_reg_454_pp0_iter18_reg;
reg   [0:0] exitcond_flatten_reg_454_pp0_iter19_reg;
wire   [15:0] indvar_flatten_next_fu_238_p2;
reg   [15:0] indvar_flatten_next_reg_458;
reg    ap_enable_reg_pp0_iter0;
wire   [7:0] j_mid2_fu_256_p3;
reg   [7:0] j_mid2_reg_464;
wire   [7:0] tmp_mid2_v_fu_264_p3;
reg   [7:0] tmp_mid2_v_reg_470;
reg   [7:0] tmp_mid2_v_reg_470_pp0_iter1_reg;
reg   [7:0] tmp_mid2_v_reg_470_pp0_iter2_reg;
reg   [7:0] tmp_mid2_v_reg_470_pp0_iter3_reg;
reg   [7:0] tmp_mid2_v_reg_470_pp0_iter4_reg;
reg   [7:0] tmp_mid2_v_reg_470_pp0_iter5_reg;
reg   [7:0] tmp_mid2_v_reg_470_pp0_iter6_reg;
reg   [7:0] tmp_mid2_v_reg_470_pp0_iter7_reg;
reg   [7:0] tmp_mid2_v_reg_470_pp0_iter8_reg;
reg   [7:0] tmp_mid2_v_reg_470_pp0_iter9_reg;
reg   [7:0] tmp_mid2_v_reg_470_pp0_iter10_reg;
reg   [7:0] tmp_mid2_v_reg_470_pp0_iter11_reg;
reg   [31:0] eventSlice_addr_reg_477;
reg   [31:0] eventSlice_addr_reg_477_pp0_iter1_reg;
reg   [31:0] eventSlice_addr_reg_477_pp0_iter2_reg;
reg   [31:0] eventSlice_addr_reg_477_pp0_iter3_reg;
reg   [31:0] eventSlice_addr_reg_477_pp0_iter4_reg;
reg   [31:0] eventSlice_addr_reg_477_pp0_iter5_reg;
reg   [31:0] eventSlice_addr_reg_477_pp0_iter6_reg;
reg   [31:0] eventSlice_addr_reg_477_pp0_iter7_reg;
reg   [31:0] eventSlice_addr_reg_477_pp0_iter8_reg;
reg   [31:0] eventSlice_addr_reg_477_pp0_iter9_reg;
reg   [31:0] eventSlice_addr_reg_477_pp0_iter10_reg;
reg   [31:0] eventSlice_addr_reg_477_pp0_iter11_reg;
reg   [31:0] eventSlice_addr_reg_477_pp0_iter12_reg;
reg   [31:0] eventSlice_addr_reg_477_pp0_iter13_reg;
reg   [31:0] eventSlice_addr_reg_477_pp0_iter14_reg;
reg   [31:0] eventSlice_addr_reg_477_pp0_iter15_reg;
reg   [31:0] eventSlice_addr_reg_477_pp0_iter16_reg;
reg   [31:0] eventSlice_addr_reg_477_pp0_iter17_reg;
reg   [31:0] eventSlice_addr_reg_477_pp0_iter18_reg;
reg   [31:0] eventSlice_addr_reg_477_pp0_iter19_reg;
wire   [7:0] j_1_fu_337_p2;
reg   [3:0] tmp_14_reg_488;
reg   [3:0] tmp_14_reg_488_pp0_iter2_reg;
reg   [3:0] tmp_14_reg_488_pp0_iter3_reg;
reg   [3:0] tmp_14_reg_488_pp0_iter4_reg;
reg   [3:0] tmp_14_reg_488_pp0_iter5_reg;
reg   [3:0] tmp_14_reg_488_pp0_iter6_reg;
reg   [3:0] tmp_14_reg_488_pp0_iter7_reg;
reg   [3:0] tmp_14_reg_488_pp0_iter8_reg;
reg   [3:0] tmp_14_reg_488_pp0_iter9_reg;
reg   [3:0] tmp_14_reg_488_pp0_iter10_reg;
reg   [3:0] tmp_14_reg_488_pp0_iter11_reg;
reg   [3:0] tmp_14_reg_488_pp0_iter12_reg;
wire   [7:0] grp_fu_314_p2;
reg   [7:0] newIndex_reg_493;
wire   [7:0] tmp_8_fu_423_p6;
reg   [7:0] tmp_8_reg_518;
reg   [7:0] tmp_8_reg_518_pp0_iter14_reg;
reg   [7:0] tmp_8_reg_518_pp0_iter15_reg;
reg   [7:0] tmp_8_reg_518_pp0_iter16_reg;
reg   [7:0] tmp_8_reg_518_pp0_iter17_reg;
reg   [7:0] tmp_8_reg_518_pp0_iter18_reg;
reg   [7:0] tmp_8_reg_518_pp0_iter19_reg;
reg   [7:0] tmp_8_reg_518_pp0_iter20_reg;
wire   [0:0] tmp_16_fu_437_p2;
wire   [0:0] tmp_18_fu_443_p2;
reg   [0:0] tmp_18_reg_527_pp0_iter21_reg;
reg   [0:0] tmp_18_reg_527_pp0_iter22_reg;
reg   [0:0] tmp_18_reg_527_pp0_iter23_reg;
reg   [0:0] tmp_18_reg_527_pp0_iter24_reg;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg   [15:0] ap_phi_mux_indvar_flatten_phi_fu_172_p4;
reg   [7:0] ap_phi_mux_i_phi_fu_184_p4;
wire  signed [31:0] tmp_72_cast_fu_408_p1;
wire   [31:0] sum2_fu_320_p2;
reg    ap_reg_ioackin_m_axi_eventSlice_AWREADY;
reg    ap_block_pp0_stage0_01001;
reg    ap_reg_ioackin_m_axi_eventSlice_WREADY;
wire   [15:0] p_shl_fu_202_p3;
wire   [11:0] p_shl1_fu_214_p3;
wire   [16:0] p_shl_cast_fu_210_p1;
wire   [16:0] p_shl1_cast_fu_222_p1;
wire   [0:0] exitcond_fu_250_p2;
wire   [7:0] i_3_fu_244_p2;
wire   [15:0] p_shl_mid1_fu_272_p3;
wire   [11:0] p_shl1_mid1_fu_284_p3;
wire   [16:0] p_shl_cast_mid1_fu_280_p1;
wire   [16:0] p_shl1_cast_mid1_fu_292_p1;
wire   [16:0] tmp_mid1_fu_296_p2;
wire   [16:0] tmp_s_fu_226_p2;
wire   [16:0] tmp_mid2_fu_302_p3;
wire   [6:0] grp_fu_314_p1;
wire  signed [31:0] tmp_7_mid2_fu_310_p1;
wire   [8:0] grp_fu_331_p1;
wire   [7:0] mul_fu_346_p0;
wire   [17:0] mul_fu_346_p2;
wire   [8:0] grp_fu_362_p1;
wire   [13:0] tmp_fu_367_p3;
wire   [9:0] tmp_63_fu_378_p3;
wire   [14:0] p_shl4_cast_fu_374_p1;
wire   [14:0] p_shl5_cast_fu_385_p1;
wire   [14:0] tmp_64_fu_389_p2;
wire  signed [15:0] tmp_71_cast_fu_395_p1;
wire   [15:0] newIndex2_cast_fu_399_p1;
wire   [15:0] tmp_65_fu_402_p2;
wire  signed [7:0] arrayNo_fu_416_p1;
wire   [15:0] tmp_8_fu_423_p5;
wire   [15:0] grp_fu_331_p2;
wire   [15:0] grp_fu_362_p2;
reg    grp_fu_314_ce;
reg    grp_fu_331_ce;
reg    grp_fu_362_ce;
wire    ap_CS_fsm_state29;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [17:0] mul_fu_346_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_reg_ioackin_m_axi_eventSlice_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_eventSlice_WREADY = 1'b0;
end

a0_parseEvents_urem_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 8 ))
parseEvents_urem_bkb_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(j_mid2_fu_256_p3),
    .din1(grp_fu_314_p1),
    .ce(grp_fu_314_ce),
    .dout(grp_fu_314_p2)
);

a0_parseEvents_urem_cud #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
parseEvents_urem_cud_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_phi_mux_indvar_flatten_phi_fu_172_p4),
    .din1(grp_fu_331_p1),
    .ce(grp_fu_331_ce),
    .dout(grp_fu_331_p2)
);

a0_parseEvents_urem_cud #(
    .ID( 1 ),
    .NUM_STAGE( 20 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
parseEvents_urem_cud_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(indvar_flatten_next_reg_458),
    .din1(grp_fu_362_p1),
    .ce(grp_fu_362_ce),
    .dout(grp_fu_362_p2)
);

a0_parseEvents_mux_4dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 16 ),
    .dout_WIDTH( 8 ))
parseEvents_mux_4dEe_U8(
    .din0(glPLSlices_0_q0),
    .din1(glPLSlices_1_q0),
    .din2(glPLSlices_2_q0),
    .din3(glPLSlices_3_q0),
    .din4(tmp_8_fu_423_p5),
    .dout(tmp_8_fu_423_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter26 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_eventSlice_AWREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter20 == 1'b1) & (tmp_16_reg_523 == 1'd1))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_m_axi_eventSlice_AWREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (m_axi_eventSlice_AWREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_eventSlice_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_eventSlice_WREADY <= 1'b0;
    end else begin
        if (((exitcond_flatten_reg_454_pp0_iter20_reg == 1'd0) & (ap_enable_reg_pp0_iter21 == 1'b1))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_m_axi_eventSlice_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (m_axi_eventSlice_WREADY == 1'b1))) begin
                ap_reg_ioackin_m_axi_eventSlice_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_454 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_180 <= tmp_mid2_v_reg_470;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_180 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_454 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_168 <= indvar_flatten_next_reg_458;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_168 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_232_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_191 <= j_1_fu_337_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_191 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_232_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        eventSlice_addr_reg_477 <= sum2_fu_320_p2;
        j_mid2_reg_464 <= j_mid2_fu_256_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        eventSlice_addr_reg_477_pp0_iter10_reg <= eventSlice_addr_reg_477_pp0_iter9_reg;
        eventSlice_addr_reg_477_pp0_iter11_reg <= eventSlice_addr_reg_477_pp0_iter10_reg;
        eventSlice_addr_reg_477_pp0_iter12_reg <= eventSlice_addr_reg_477_pp0_iter11_reg;
        eventSlice_addr_reg_477_pp0_iter13_reg <= eventSlice_addr_reg_477_pp0_iter12_reg;
        eventSlice_addr_reg_477_pp0_iter14_reg <= eventSlice_addr_reg_477_pp0_iter13_reg;
        eventSlice_addr_reg_477_pp0_iter15_reg <= eventSlice_addr_reg_477_pp0_iter14_reg;
        eventSlice_addr_reg_477_pp0_iter16_reg <= eventSlice_addr_reg_477_pp0_iter15_reg;
        eventSlice_addr_reg_477_pp0_iter17_reg <= eventSlice_addr_reg_477_pp0_iter16_reg;
        eventSlice_addr_reg_477_pp0_iter18_reg <= eventSlice_addr_reg_477_pp0_iter17_reg;
        eventSlice_addr_reg_477_pp0_iter19_reg <= eventSlice_addr_reg_477_pp0_iter18_reg;
        eventSlice_addr_reg_477_pp0_iter2_reg <= eventSlice_addr_reg_477_pp0_iter1_reg;
        eventSlice_addr_reg_477_pp0_iter3_reg <= eventSlice_addr_reg_477_pp0_iter2_reg;
        eventSlice_addr_reg_477_pp0_iter4_reg <= eventSlice_addr_reg_477_pp0_iter3_reg;
        eventSlice_addr_reg_477_pp0_iter5_reg <= eventSlice_addr_reg_477_pp0_iter4_reg;
        eventSlice_addr_reg_477_pp0_iter6_reg <= eventSlice_addr_reg_477_pp0_iter5_reg;
        eventSlice_addr_reg_477_pp0_iter7_reg <= eventSlice_addr_reg_477_pp0_iter6_reg;
        eventSlice_addr_reg_477_pp0_iter8_reg <= eventSlice_addr_reg_477_pp0_iter7_reg;
        eventSlice_addr_reg_477_pp0_iter9_reg <= eventSlice_addr_reg_477_pp0_iter8_reg;
        exitcond_flatten_reg_454_pp0_iter10_reg <= exitcond_flatten_reg_454_pp0_iter9_reg;
        exitcond_flatten_reg_454_pp0_iter11_reg <= exitcond_flatten_reg_454_pp0_iter10_reg;
        exitcond_flatten_reg_454_pp0_iter12_reg <= exitcond_flatten_reg_454_pp0_iter11_reg;
        exitcond_flatten_reg_454_pp0_iter13_reg <= exitcond_flatten_reg_454_pp0_iter12_reg;
        exitcond_flatten_reg_454_pp0_iter14_reg <= exitcond_flatten_reg_454_pp0_iter13_reg;
        exitcond_flatten_reg_454_pp0_iter15_reg <= exitcond_flatten_reg_454_pp0_iter14_reg;
        exitcond_flatten_reg_454_pp0_iter16_reg <= exitcond_flatten_reg_454_pp0_iter15_reg;
        exitcond_flatten_reg_454_pp0_iter17_reg <= exitcond_flatten_reg_454_pp0_iter16_reg;
        exitcond_flatten_reg_454_pp0_iter18_reg <= exitcond_flatten_reg_454_pp0_iter17_reg;
        exitcond_flatten_reg_454_pp0_iter19_reg <= exitcond_flatten_reg_454_pp0_iter18_reg;
        exitcond_flatten_reg_454_pp0_iter20_reg <= exitcond_flatten_reg_454_pp0_iter19_reg;
        exitcond_flatten_reg_454_pp0_iter2_reg <= exitcond_flatten_reg_454_pp0_iter1_reg;
        exitcond_flatten_reg_454_pp0_iter3_reg <= exitcond_flatten_reg_454_pp0_iter2_reg;
        exitcond_flatten_reg_454_pp0_iter4_reg <= exitcond_flatten_reg_454_pp0_iter3_reg;
        exitcond_flatten_reg_454_pp0_iter5_reg <= exitcond_flatten_reg_454_pp0_iter4_reg;
        exitcond_flatten_reg_454_pp0_iter6_reg <= exitcond_flatten_reg_454_pp0_iter5_reg;
        exitcond_flatten_reg_454_pp0_iter7_reg <= exitcond_flatten_reg_454_pp0_iter6_reg;
        exitcond_flatten_reg_454_pp0_iter8_reg <= exitcond_flatten_reg_454_pp0_iter7_reg;
        exitcond_flatten_reg_454_pp0_iter9_reg <= exitcond_flatten_reg_454_pp0_iter8_reg;
        tmp_14_reg_488_pp0_iter10_reg <= tmp_14_reg_488_pp0_iter9_reg;
        tmp_14_reg_488_pp0_iter11_reg <= tmp_14_reg_488_pp0_iter10_reg;
        tmp_14_reg_488_pp0_iter12_reg <= tmp_14_reg_488_pp0_iter11_reg;
        tmp_14_reg_488_pp0_iter2_reg <= tmp_14_reg_488;
        tmp_14_reg_488_pp0_iter3_reg <= tmp_14_reg_488_pp0_iter2_reg;
        tmp_14_reg_488_pp0_iter4_reg <= tmp_14_reg_488_pp0_iter3_reg;
        tmp_14_reg_488_pp0_iter5_reg <= tmp_14_reg_488_pp0_iter4_reg;
        tmp_14_reg_488_pp0_iter6_reg <= tmp_14_reg_488_pp0_iter5_reg;
        tmp_14_reg_488_pp0_iter7_reg <= tmp_14_reg_488_pp0_iter6_reg;
        tmp_14_reg_488_pp0_iter8_reg <= tmp_14_reg_488_pp0_iter7_reg;
        tmp_14_reg_488_pp0_iter9_reg <= tmp_14_reg_488_pp0_iter8_reg;
        tmp_18_reg_527_pp0_iter21_reg <= tmp_18_reg_527;
        tmp_18_reg_527_pp0_iter22_reg <= tmp_18_reg_527_pp0_iter21_reg;
        tmp_18_reg_527_pp0_iter23_reg <= tmp_18_reg_527_pp0_iter22_reg;
        tmp_18_reg_527_pp0_iter24_reg <= tmp_18_reg_527_pp0_iter23_reg;
        tmp_18_reg_527_pp0_iter25_reg <= tmp_18_reg_527_pp0_iter24_reg;
        tmp_8_reg_518_pp0_iter14_reg <= tmp_8_reg_518;
        tmp_8_reg_518_pp0_iter15_reg <= tmp_8_reg_518_pp0_iter14_reg;
        tmp_8_reg_518_pp0_iter16_reg <= tmp_8_reg_518_pp0_iter15_reg;
        tmp_8_reg_518_pp0_iter17_reg <= tmp_8_reg_518_pp0_iter16_reg;
        tmp_8_reg_518_pp0_iter18_reg <= tmp_8_reg_518_pp0_iter17_reg;
        tmp_8_reg_518_pp0_iter19_reg <= tmp_8_reg_518_pp0_iter18_reg;
        tmp_8_reg_518_pp0_iter20_reg <= tmp_8_reg_518_pp0_iter19_reg;
        tmp_mid2_v_reg_470_pp0_iter10_reg <= tmp_mid2_v_reg_470_pp0_iter9_reg;
        tmp_mid2_v_reg_470_pp0_iter11_reg <= tmp_mid2_v_reg_470_pp0_iter10_reg;
        tmp_mid2_v_reg_470_pp0_iter2_reg <= tmp_mid2_v_reg_470_pp0_iter1_reg;
        tmp_mid2_v_reg_470_pp0_iter3_reg <= tmp_mid2_v_reg_470_pp0_iter2_reg;
        tmp_mid2_v_reg_470_pp0_iter4_reg <= tmp_mid2_v_reg_470_pp0_iter3_reg;
        tmp_mid2_v_reg_470_pp0_iter5_reg <= tmp_mid2_v_reg_470_pp0_iter4_reg;
        tmp_mid2_v_reg_470_pp0_iter6_reg <= tmp_mid2_v_reg_470_pp0_iter5_reg;
        tmp_mid2_v_reg_470_pp0_iter7_reg <= tmp_mid2_v_reg_470_pp0_iter6_reg;
        tmp_mid2_v_reg_470_pp0_iter8_reg <= tmp_mid2_v_reg_470_pp0_iter7_reg;
        tmp_mid2_v_reg_470_pp0_iter9_reg <= tmp_mid2_v_reg_470_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        eventSlice_addr_reg_477_pp0_iter1_reg <= eventSlice_addr_reg_477;
        exitcond_flatten_reg_454 <= exitcond_flatten_fu_232_p2;
        exitcond_flatten_reg_454_pp0_iter1_reg <= exitcond_flatten_reg_454;
        tmp_mid2_v_reg_470_pp0_iter1_reg <= tmp_mid2_v_reg_470;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_next_reg_458 <= indvar_flatten_next_fu_238_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_454_pp0_iter10_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        newIndex_reg_493 <= grp_fu_314_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_454 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_14_reg_488 <= {{mul_fu_346_p2[17:14]}};
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_454_pp0_iter18_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_16_reg_523 <= tmp_16_fu_437_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_454_pp0_iter19_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_18_reg_527 <= tmp_18_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_454_pp0_iter12_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_8_reg_518 <= tmp_8_fu_423_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_232_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_mid2_v_reg_470 <= tmp_mid2_v_fu_264_p3;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_232_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state29) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_454 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_184_p4 = tmp_mid2_v_reg_470;
    end else begin
        ap_phi_mux_i_phi_fu_184_p4 = i_reg_180;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_454 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_172_p4 = indvar_flatten_next_reg_458;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_172_p4 = indvar_flatten_reg_168;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_eventSlice_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_eventSlice_AWREADY = m_axi_eventSlice_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_eventSlice_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_eventSlice_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_eventSlice_WREADY = m_axi_eventSlice_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_eventSlice_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter20 == 1'b1) & (tmp_16_reg_523 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        eventSlice_blk_n_AW = m_axi_eventSlice_AWREADY;
    end else begin
        eventSlice_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b1) & (tmp_18_reg_527_pp0_iter25_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        eventSlice_blk_n_B = m_axi_eventSlice_BVALID;
    end else begin
        eventSlice_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_454_pp0_iter20_reg == 1'd0) & (ap_enable_reg_pp0_iter21 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        eventSlice_blk_n_W = m_axi_eventSlice_WREADY;
    end else begin
        eventSlice_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        glPLSlices_0_ce0 = 1'b1;
    end else begin
        glPLSlices_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        glPLSlices_1_ce0 = 1'b1;
    end else begin
        glPLSlices_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        glPLSlices_2_ce0 = 1'b1;
    end else begin
        glPLSlices_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        glPLSlices_3_ce0 = 1'b1;
    end else begin
        glPLSlices_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_314_ce = 1'b1;
    end else begin
        grp_fu_314_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_331_ce = 1'b1;
    end else begin
        grp_fu_331_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_362_ce = 1'b1;
    end else begin
        grp_fu_362_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_m_axi_eventSlice_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b1) & (tmp_16_reg_523 == 1'd1))) begin
        m_axi_eventSlice_AWVALID = 1'b1;
    end else begin
        m_axi_eventSlice_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter26 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (tmp_18_reg_527_pp0_iter25_reg == 1'd1))) begin
        m_axi_eventSlice_BREADY = 1'b1;
    end else begin
        m_axi_eventSlice_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_454_pp0_iter20_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_m_axi_eventSlice_WREADY == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b1))) begin
        m_axi_eventSlice_WVALID = 1'b1;
    end else begin
        m_axi_eventSlice_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_232_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter25 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter26 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_232_p2 == 1'd1)) | ((ap_enable_reg_pp0_iter25 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter26 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((m_axi_eventSlice_BVALID == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b1) & (tmp_18_reg_527_pp0_iter25_reg == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_eventSlice_BVALID == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b1) & (tmp_18_reg_527_pp0_iter25_reg == 1'd1)) | ((ap_enable_reg_pp0_iter21 == 1'b1) & (1'b1 == ap_block_state23_io)) | ((ap_enable_reg_pp0_iter20 == 1'b1) & (1'b1 == ap_block_state22_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_eventSlice_BVALID == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b1) & (tmp_18_reg_527_pp0_iter25_reg == 1'd1)) | ((ap_enable_reg_pp0_iter21 == 1'b1) & (1'b1 == ap_block_state23_io)) | ((ap_enable_reg_pp0_iter20 == 1'b1) & (1'b1 == ap_block_state22_io)));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_io = ((ap_sig_ioackin_m_axi_eventSlice_AWREADY == 1'b0) & (tmp_16_reg_523 == 1'd1));
end

assign ap_block_state22_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_io = ((exitcond_flatten_reg_454_pp0_iter20_reg == 1'd0) & (ap_sig_ioackin_m_axi_eventSlice_WREADY == 1'b0));
end

assign ap_block_state23_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state28_pp0_stage0_iter26 = ((m_axi_eventSlice_BVALID == 1'b0) & (tmp_18_reg_527_pp0_iter25_reg == 1'd1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign arrayNo_fu_416_p1 = $signed(tmp_14_reg_488_pp0_iter12_reg);

assign exitcond_flatten_fu_232_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_172_p4 == 16'd43200) ? 1'b1 : 1'b0);

assign exitcond_fu_250_p2 = ((j_reg_191 == 8'd240) ? 1'b1 : 1'b0);

assign glPLSlices_0_address0 = tmp_72_cast_fu_408_p1;

assign glPLSlices_1_address0 = tmp_72_cast_fu_408_p1;

assign glPLSlices_2_address0 = tmp_72_cast_fu_408_p1;

assign glPLSlices_3_address0 = tmp_72_cast_fu_408_p1;

assign grp_fu_314_p1 = 8'd60;

assign grp_fu_331_p1 = 16'd240;

assign grp_fu_362_p1 = 16'd240;

assign i_3_fu_244_p2 = (ap_phi_mux_i_phi_fu_184_p4 + 8'd1);

assign indvar_flatten_next_fu_238_p2 = (ap_phi_mux_indvar_flatten_phi_fu_172_p4 + 16'd1);

assign j_1_fu_337_p2 = (j_mid2_fu_256_p3 + 8'd1);

assign j_mid2_fu_256_p3 = ((exitcond_fu_250_p2[0:0] === 1'b1) ? 8'd0 : j_reg_191);

assign m_axi_eventSlice_ARADDR = 32'd0;

assign m_axi_eventSlice_ARBURST = 2'd0;

assign m_axi_eventSlice_ARCACHE = 4'd0;

assign m_axi_eventSlice_ARID = 1'd0;

assign m_axi_eventSlice_ARLEN = 32'd0;

assign m_axi_eventSlice_ARLOCK = 2'd0;

assign m_axi_eventSlice_ARPROT = 3'd0;

assign m_axi_eventSlice_ARQOS = 4'd0;

assign m_axi_eventSlice_ARREGION = 4'd0;

assign m_axi_eventSlice_ARSIZE = 3'd0;

assign m_axi_eventSlice_ARUSER = 1'd0;

assign m_axi_eventSlice_ARVALID = 1'b0;

assign m_axi_eventSlice_AWADDR = eventSlice_addr_reg_477_pp0_iter19_reg;

assign m_axi_eventSlice_AWBURST = 2'd0;

assign m_axi_eventSlice_AWCACHE = 4'd0;

assign m_axi_eventSlice_AWID = 1'd0;

assign m_axi_eventSlice_AWLEN = 32'd240;

assign m_axi_eventSlice_AWLOCK = 2'd0;

assign m_axi_eventSlice_AWPROT = 3'd0;

assign m_axi_eventSlice_AWQOS = 4'd0;

assign m_axi_eventSlice_AWREGION = 4'd0;

assign m_axi_eventSlice_AWSIZE = 3'd0;

assign m_axi_eventSlice_AWUSER = 1'd0;

assign m_axi_eventSlice_RREADY = 1'b0;

assign m_axi_eventSlice_WDATA = tmp_8_reg_518_pp0_iter20_reg;

assign m_axi_eventSlice_WID = 1'd0;

assign m_axi_eventSlice_WLAST = 1'b0;

assign m_axi_eventSlice_WSTRB = 1'd1;

assign m_axi_eventSlice_WUSER = 1'd0;

assign mul_fu_346_p0 = mul_fu_346_p00;

assign mul_fu_346_p00 = j_mid2_reg_464;

assign mul_fu_346_p2 = (mul_fu_346_p0 * $signed('h112));

assign newIndex2_cast_fu_399_p1 = newIndex_reg_493;

assign p_shl1_cast_fu_222_p1 = p_shl1_fu_214_p3;

assign p_shl1_cast_mid1_fu_292_p1 = p_shl1_mid1_fu_284_p3;

assign p_shl1_fu_214_p3 = {{ap_phi_mux_i_phi_fu_184_p4}, {4'd0}};

assign p_shl1_mid1_fu_284_p3 = {{i_3_fu_244_p2}, {4'd0}};

assign p_shl4_cast_fu_374_p1 = tmp_fu_367_p3;

assign p_shl5_cast_fu_385_p1 = tmp_63_fu_378_p3;

assign p_shl_cast_fu_210_p1 = p_shl_fu_202_p3;

assign p_shl_cast_mid1_fu_280_p1 = p_shl_mid1_fu_272_p3;

assign p_shl_fu_202_p3 = {{ap_phi_mux_i_phi_fu_184_p4}, {8'd0}};

assign p_shl_mid1_fu_272_p3 = {{i_3_fu_244_p2}, {8'd0}};

assign sum2_fu_320_p2 = ($signed(eventSlice_offset) + $signed(tmp_7_mid2_fu_310_p1));

assign tmp_16_fu_437_p2 = ((grp_fu_331_p2 == 16'd0) ? 1'b1 : 1'b0);

assign tmp_18_fu_443_p2 = ((grp_fu_362_p2 == 16'd0) ? 1'b1 : 1'b0);

assign tmp_63_fu_378_p3 = {{tmp_mid2_v_reg_470_pp0_iter11_reg}, {2'd0}};

assign tmp_64_fu_389_p2 = (p_shl4_cast_fu_374_p1 - p_shl5_cast_fu_385_p1);

assign tmp_65_fu_402_p2 = ($signed(tmp_71_cast_fu_395_p1) + $signed(newIndex2_cast_fu_399_p1));

assign tmp_71_cast_fu_395_p1 = $signed(tmp_64_fu_389_p2);

assign tmp_72_cast_fu_408_p1 = $signed(tmp_65_fu_402_p2);

assign tmp_7_mid2_fu_310_p1 = $signed(tmp_mid2_fu_302_p3);

assign tmp_8_fu_423_p5 = $unsigned(arrayNo_fu_416_p1);

assign tmp_fu_367_p3 = {{tmp_mid2_v_reg_470_pp0_iter11_reg}, {6'd0}};

assign tmp_mid1_fu_296_p2 = (p_shl_cast_mid1_fu_280_p1 - p_shl1_cast_mid1_fu_292_p1);

assign tmp_mid2_fu_302_p3 = ((exitcond_fu_250_p2[0:0] === 1'b1) ? tmp_mid1_fu_296_p2 : tmp_s_fu_226_p2);

assign tmp_mid2_v_fu_264_p3 = ((exitcond_fu_250_p2[0:0] === 1'b1) ? i_3_fu_244_p2 : ap_phi_mux_i_phi_fu_184_p4);

assign tmp_s_fu_226_p2 = (p_shl_cast_fu_210_p1 - p_shl1_cast_fu_222_p1);

endmodule //a0_copyToPS
