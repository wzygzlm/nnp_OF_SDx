-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a0_copyToPS is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_eventSlice_AWVALID : OUT STD_LOGIC;
    m_axi_eventSlice_AWREADY : IN STD_LOGIC;
    m_axi_eventSlice_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_eventSlice_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_eventSlice_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_eventSlice_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_eventSlice_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_eventSlice_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_eventSlice_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_eventSlice_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_eventSlice_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_eventSlice_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_eventSlice_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_eventSlice_WVALID : OUT STD_LOGIC;
    m_axi_eventSlice_WREADY : IN STD_LOGIC;
    m_axi_eventSlice_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_eventSlice_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_eventSlice_WLAST : OUT STD_LOGIC;
    m_axi_eventSlice_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_eventSlice_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_eventSlice_ARVALID : OUT STD_LOGIC;
    m_axi_eventSlice_ARREADY : IN STD_LOGIC;
    m_axi_eventSlice_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_eventSlice_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_eventSlice_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_eventSlice_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_eventSlice_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_eventSlice_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_eventSlice_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_eventSlice_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_eventSlice_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_eventSlice_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_eventSlice_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_eventSlice_RVALID : IN STD_LOGIC;
    m_axi_eventSlice_RREADY : OUT STD_LOGIC;
    m_axi_eventSlice_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    m_axi_eventSlice_RLAST : IN STD_LOGIC;
    m_axi_eventSlice_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_eventSlice_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_eventSlice_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_eventSlice_BVALID : IN STD_LOGIC;
    m_axi_eventSlice_BREADY : OUT STD_LOGIC;
    m_axi_eventSlice_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_eventSlice_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_eventSlice_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    eventSlice_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    glPLSlices_0_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    glPLSlices_0_ce0 : OUT STD_LOGIC;
    glPLSlices_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_1_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    glPLSlices_1_ce0 : OUT STD_LOGIC;
    glPLSlices_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_2_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    glPLSlices_2_ce0 : OUT STD_LOGIC;
    glPLSlices_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    glPLSlices_3_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    glPLSlices_3_ce0 : OUT STD_LOGIC;
    glPLSlices_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of a0_copyToPS is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv16_A8C0 : STD_LOGIC_VECTOR (15 downto 0) := "1010100011000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_F0 : STD_LOGIC_VECTOR (7 downto 0) := "11110000";
    constant ap_const_lv8_3C : STD_LOGIC_VECTOR (7 downto 0) := "00111100";
    constant ap_const_lv16_F0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000011110000";
    constant ap_const_lv18_112 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100010010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal eventSlice_blk_n_AW : STD_LOGIC;
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_16_reg_523 : STD_LOGIC_VECTOR (0 downto 0);
    signal eventSlice_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_454 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_454_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal eventSlice_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal tmp_18_reg_527 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_527_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_168 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter20 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_eventSlice_AWREADY : STD_LOGIC;
    signal ap_block_state22_io : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter21 : BOOLEAN;
    signal ap_sig_ioackin_m_axi_eventSlice_WREADY : STD_LOGIC;
    signal ap_block_state23_io : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_reg_180 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_191 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_flatten_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_454_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_454_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_454_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_454_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_454_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_454_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_454_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_454_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_454_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_454_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_454_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_454_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_454_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_454_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_454_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_454_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_454_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_454_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_454_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_238_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten_next_reg_458 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal j_mid2_fu_256_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_mid2_reg_464 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_mid2_v_fu_264_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_mid2_v_reg_470 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_mid2_v_reg_470_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_mid2_v_reg_470_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_mid2_v_reg_470_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_mid2_v_reg_470_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_mid2_v_reg_470_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_mid2_v_reg_470_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_mid2_v_reg_470_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_mid2_v_reg_470_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_mid2_v_reg_470_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_mid2_v_reg_470_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_mid2_v_reg_470_pp0_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal eventSlice_addr_reg_477 : STD_LOGIC_VECTOR (31 downto 0);
    signal eventSlice_addr_reg_477_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal eventSlice_addr_reg_477_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal eventSlice_addr_reg_477_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal eventSlice_addr_reg_477_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal eventSlice_addr_reg_477_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal eventSlice_addr_reg_477_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal eventSlice_addr_reg_477_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal eventSlice_addr_reg_477_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal eventSlice_addr_reg_477_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal eventSlice_addr_reg_477_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal eventSlice_addr_reg_477_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal eventSlice_addr_reg_477_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal eventSlice_addr_reg_477_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal eventSlice_addr_reg_477_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal eventSlice_addr_reg_477_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal eventSlice_addr_reg_477_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal eventSlice_addr_reg_477_pp0_iter17_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal eventSlice_addr_reg_477_pp0_iter18_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal eventSlice_addr_reg_477_pp0_iter19_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_337_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_reg_488 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_reg_488_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_reg_488_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_reg_488_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_reg_488_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_reg_488_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_reg_488_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_reg_488_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_reg_488_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_reg_488_pp0_iter10_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_reg_488_pp0_iter11_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_14_reg_488_pp0_iter12_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_314_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal newIndex_reg_493 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_423_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_518 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_518_pp0_iter14_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_518_pp0_iter15_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_518_pp0_iter16_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_518_pp0_iter17_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_518_pp0_iter18_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_518_pp0_iter19_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_518_pp0_iter20_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_527_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_527_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_527_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_527_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten_phi_fu_172_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_i_phi_fu_184_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_72_cast_fu_408_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum2_fu_320_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_m_axi_eventSlice_AWREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_reg_ioackin_m_axi_eventSlice_WREADY : STD_LOGIC := '0';
    signal p_shl_fu_202_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl1_fu_214_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_cast_fu_210_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl1_cast_fu_222_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal exitcond_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_fu_244_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_mid1_fu_272_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl1_mid1_fu_284_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl_cast_mid1_fu_280_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_shl1_cast_mid1_fu_292_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_mid1_fu_296_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_s_fu_226_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_mid2_fu_302_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_314_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_mid2_fu_310_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_331_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_fu_346_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_fu_346_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_362_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_367_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_63_fu_378_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl4_cast_fu_374_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal p_shl5_cast_fu_385_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_64_fu_389_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_71_cast_fu_395_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal newIndex2_cast_fu_399_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_65_fu_402_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal arrayNo_fu_416_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_423_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_331_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_362_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_314_ce : STD_LOGIC;
    signal grp_fu_331_ce : STD_LOGIC;
    signal grp_fu_362_ce : STD_LOGIC;
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_fu_346_p00 : STD_LOGIC_VECTOR (17 downto 0);

    component a0_parseEvents_urem_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component a0_parseEvents_urem_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component a0_parseEvents_mux_4dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    parseEvents_urem_bkb_U5 : component a0_parseEvents_urem_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 8,
        din1_WIDTH => 7,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => j_mid2_fu_256_p3,
        din1 => grp_fu_314_p1,
        ce => grp_fu_314_ce,
        dout => grp_fu_314_p2);

    parseEvents_urem_cud_U6 : component a0_parseEvents_urem_cud
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_indvar_flatten_phi_fu_172_p4,
        din1 => grp_fu_331_p1,
        ce => grp_fu_331_ce,
        dout => grp_fu_331_p2);

    parseEvents_urem_cud_U7 : component a0_parseEvents_urem_cud
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => indvar_flatten_next_reg_458,
        din1 => grp_fu_362_p1,
        ce => grp_fu_362_ce,
        dout => grp_fu_362_p2);

    parseEvents_mux_4dEe_U8 : component a0_parseEvents_mux_4dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 16,
        dout_WIDTH => 8)
    port map (
        din0 => glPLSlices_0_q0,
        din1 => glPLSlices_1_q0,
        din2 => glPLSlices_2_q0,
        din3 => glPLSlices_3_q0,
        din4 => tmp_8_fu_423_p5,
        dout => tmp_8_fu_423_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_eventSlice_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_eventSlice_AWREADY <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (tmp_16_reg_523 = ap_const_lv1_1))) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_reg_ioackin_m_axi_eventSlice_AWREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (m_axi_eventSlice_AWREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_axi_eventSlice_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_eventSlice_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_eventSlice_WREADY <= ap_const_logic_0;
            else
                if (((exitcond_flatten_reg_454_pp0_iter20_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1))) then
                    if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_reg_ioackin_m_axi_eventSlice_WREADY <= ap_const_logic_0;
                    elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (m_axi_eventSlice_WREADY = ap_const_logic_1))) then 
                        ap_reg_ioackin_m_axi_eventSlice_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_454 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_180 <= tmp_mid2_v_reg_470;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_180 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_454 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_168 <= indvar_flatten_next_reg_458;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_168 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    j_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_232_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_reg_191 <= j_1_fu_337_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_reg_191 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_232_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                eventSlice_addr_reg_477 <= sum2_fu_320_p2;
                j_mid2_reg_464 <= j_mid2_fu_256_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                eventSlice_addr_reg_477_pp0_iter10_reg <= eventSlice_addr_reg_477_pp0_iter9_reg;
                eventSlice_addr_reg_477_pp0_iter11_reg <= eventSlice_addr_reg_477_pp0_iter10_reg;
                eventSlice_addr_reg_477_pp0_iter12_reg <= eventSlice_addr_reg_477_pp0_iter11_reg;
                eventSlice_addr_reg_477_pp0_iter13_reg <= eventSlice_addr_reg_477_pp0_iter12_reg;
                eventSlice_addr_reg_477_pp0_iter14_reg <= eventSlice_addr_reg_477_pp0_iter13_reg;
                eventSlice_addr_reg_477_pp0_iter15_reg <= eventSlice_addr_reg_477_pp0_iter14_reg;
                eventSlice_addr_reg_477_pp0_iter16_reg <= eventSlice_addr_reg_477_pp0_iter15_reg;
                eventSlice_addr_reg_477_pp0_iter17_reg <= eventSlice_addr_reg_477_pp0_iter16_reg;
                eventSlice_addr_reg_477_pp0_iter18_reg <= eventSlice_addr_reg_477_pp0_iter17_reg;
                eventSlice_addr_reg_477_pp0_iter19_reg <= eventSlice_addr_reg_477_pp0_iter18_reg;
                eventSlice_addr_reg_477_pp0_iter2_reg <= eventSlice_addr_reg_477_pp0_iter1_reg;
                eventSlice_addr_reg_477_pp0_iter3_reg <= eventSlice_addr_reg_477_pp0_iter2_reg;
                eventSlice_addr_reg_477_pp0_iter4_reg <= eventSlice_addr_reg_477_pp0_iter3_reg;
                eventSlice_addr_reg_477_pp0_iter5_reg <= eventSlice_addr_reg_477_pp0_iter4_reg;
                eventSlice_addr_reg_477_pp0_iter6_reg <= eventSlice_addr_reg_477_pp0_iter5_reg;
                eventSlice_addr_reg_477_pp0_iter7_reg <= eventSlice_addr_reg_477_pp0_iter6_reg;
                eventSlice_addr_reg_477_pp0_iter8_reg <= eventSlice_addr_reg_477_pp0_iter7_reg;
                eventSlice_addr_reg_477_pp0_iter9_reg <= eventSlice_addr_reg_477_pp0_iter8_reg;
                exitcond_flatten_reg_454_pp0_iter10_reg <= exitcond_flatten_reg_454_pp0_iter9_reg;
                exitcond_flatten_reg_454_pp0_iter11_reg <= exitcond_flatten_reg_454_pp0_iter10_reg;
                exitcond_flatten_reg_454_pp0_iter12_reg <= exitcond_flatten_reg_454_pp0_iter11_reg;
                exitcond_flatten_reg_454_pp0_iter13_reg <= exitcond_flatten_reg_454_pp0_iter12_reg;
                exitcond_flatten_reg_454_pp0_iter14_reg <= exitcond_flatten_reg_454_pp0_iter13_reg;
                exitcond_flatten_reg_454_pp0_iter15_reg <= exitcond_flatten_reg_454_pp0_iter14_reg;
                exitcond_flatten_reg_454_pp0_iter16_reg <= exitcond_flatten_reg_454_pp0_iter15_reg;
                exitcond_flatten_reg_454_pp0_iter17_reg <= exitcond_flatten_reg_454_pp0_iter16_reg;
                exitcond_flatten_reg_454_pp0_iter18_reg <= exitcond_flatten_reg_454_pp0_iter17_reg;
                exitcond_flatten_reg_454_pp0_iter19_reg <= exitcond_flatten_reg_454_pp0_iter18_reg;
                exitcond_flatten_reg_454_pp0_iter20_reg <= exitcond_flatten_reg_454_pp0_iter19_reg;
                exitcond_flatten_reg_454_pp0_iter2_reg <= exitcond_flatten_reg_454_pp0_iter1_reg;
                exitcond_flatten_reg_454_pp0_iter3_reg <= exitcond_flatten_reg_454_pp0_iter2_reg;
                exitcond_flatten_reg_454_pp0_iter4_reg <= exitcond_flatten_reg_454_pp0_iter3_reg;
                exitcond_flatten_reg_454_pp0_iter5_reg <= exitcond_flatten_reg_454_pp0_iter4_reg;
                exitcond_flatten_reg_454_pp0_iter6_reg <= exitcond_flatten_reg_454_pp0_iter5_reg;
                exitcond_flatten_reg_454_pp0_iter7_reg <= exitcond_flatten_reg_454_pp0_iter6_reg;
                exitcond_flatten_reg_454_pp0_iter8_reg <= exitcond_flatten_reg_454_pp0_iter7_reg;
                exitcond_flatten_reg_454_pp0_iter9_reg <= exitcond_flatten_reg_454_pp0_iter8_reg;
                tmp_14_reg_488_pp0_iter10_reg <= tmp_14_reg_488_pp0_iter9_reg;
                tmp_14_reg_488_pp0_iter11_reg <= tmp_14_reg_488_pp0_iter10_reg;
                tmp_14_reg_488_pp0_iter12_reg <= tmp_14_reg_488_pp0_iter11_reg;
                tmp_14_reg_488_pp0_iter2_reg <= tmp_14_reg_488;
                tmp_14_reg_488_pp0_iter3_reg <= tmp_14_reg_488_pp0_iter2_reg;
                tmp_14_reg_488_pp0_iter4_reg <= tmp_14_reg_488_pp0_iter3_reg;
                tmp_14_reg_488_pp0_iter5_reg <= tmp_14_reg_488_pp0_iter4_reg;
                tmp_14_reg_488_pp0_iter6_reg <= tmp_14_reg_488_pp0_iter5_reg;
                tmp_14_reg_488_pp0_iter7_reg <= tmp_14_reg_488_pp0_iter6_reg;
                tmp_14_reg_488_pp0_iter8_reg <= tmp_14_reg_488_pp0_iter7_reg;
                tmp_14_reg_488_pp0_iter9_reg <= tmp_14_reg_488_pp0_iter8_reg;
                tmp_18_reg_527_pp0_iter21_reg <= tmp_18_reg_527;
                tmp_18_reg_527_pp0_iter22_reg <= tmp_18_reg_527_pp0_iter21_reg;
                tmp_18_reg_527_pp0_iter23_reg <= tmp_18_reg_527_pp0_iter22_reg;
                tmp_18_reg_527_pp0_iter24_reg <= tmp_18_reg_527_pp0_iter23_reg;
                tmp_18_reg_527_pp0_iter25_reg <= tmp_18_reg_527_pp0_iter24_reg;
                tmp_8_reg_518_pp0_iter14_reg <= tmp_8_reg_518;
                tmp_8_reg_518_pp0_iter15_reg <= tmp_8_reg_518_pp0_iter14_reg;
                tmp_8_reg_518_pp0_iter16_reg <= tmp_8_reg_518_pp0_iter15_reg;
                tmp_8_reg_518_pp0_iter17_reg <= tmp_8_reg_518_pp0_iter16_reg;
                tmp_8_reg_518_pp0_iter18_reg <= tmp_8_reg_518_pp0_iter17_reg;
                tmp_8_reg_518_pp0_iter19_reg <= tmp_8_reg_518_pp0_iter18_reg;
                tmp_8_reg_518_pp0_iter20_reg <= tmp_8_reg_518_pp0_iter19_reg;
                tmp_mid2_v_reg_470_pp0_iter10_reg <= tmp_mid2_v_reg_470_pp0_iter9_reg;
                tmp_mid2_v_reg_470_pp0_iter11_reg <= tmp_mid2_v_reg_470_pp0_iter10_reg;
                tmp_mid2_v_reg_470_pp0_iter2_reg <= tmp_mid2_v_reg_470_pp0_iter1_reg;
                tmp_mid2_v_reg_470_pp0_iter3_reg <= tmp_mid2_v_reg_470_pp0_iter2_reg;
                tmp_mid2_v_reg_470_pp0_iter4_reg <= tmp_mid2_v_reg_470_pp0_iter3_reg;
                tmp_mid2_v_reg_470_pp0_iter5_reg <= tmp_mid2_v_reg_470_pp0_iter4_reg;
                tmp_mid2_v_reg_470_pp0_iter6_reg <= tmp_mid2_v_reg_470_pp0_iter5_reg;
                tmp_mid2_v_reg_470_pp0_iter7_reg <= tmp_mid2_v_reg_470_pp0_iter6_reg;
                tmp_mid2_v_reg_470_pp0_iter8_reg <= tmp_mid2_v_reg_470_pp0_iter7_reg;
                tmp_mid2_v_reg_470_pp0_iter9_reg <= tmp_mid2_v_reg_470_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                eventSlice_addr_reg_477_pp0_iter1_reg <= eventSlice_addr_reg_477;
                exitcond_flatten_reg_454 <= exitcond_flatten_fu_232_p2;
                exitcond_flatten_reg_454_pp0_iter1_reg <= exitcond_flatten_reg_454;
                tmp_mid2_v_reg_470_pp0_iter1_reg <= tmp_mid2_v_reg_470;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                indvar_flatten_next_reg_458 <= indvar_flatten_next_fu_238_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_454_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                newIndex_reg_493 <= grp_fu_314_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_454 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_14_reg_488 <= mul_fu_346_p2(17 downto 14);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_454_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_16_reg_523 <= tmp_16_fu_437_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_454_pp0_iter19_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_18_reg_527 <= tmp_18_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_454_pp0_iter12_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_8_reg_518 <= tmp_8_fu_423_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_232_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_mid2_v_reg_470 <= tmp_mid2_v_fu_264_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter26, exitcond_flatten_fu_232_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter25)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_232_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_232_p2 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state29 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(m_axi_eventSlice_BVALID, ap_enable_reg_pp0_iter26, tmp_18_reg_527_pp0_iter25_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((m_axi_eventSlice_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (tmp_18_reg_527_pp0_iter25_reg = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_eventSlice_BVALID, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter26, tmp_18_reg_527_pp0_iter25_reg, ap_block_state22_io, ap_block_state23_io)
    begin
                ap_block_pp0_stage0_11001 <= (((m_axi_eventSlice_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (tmp_18_reg_527_pp0_iter25_reg = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state23_io)) or ((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state22_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_eventSlice_BVALID, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter26, tmp_18_reg_527_pp0_iter25_reg, ap_block_state22_io, ap_block_state23_io)
    begin
                ap_block_pp0_stage0_subdone <= (((m_axi_eventSlice_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (tmp_18_reg_527_pp0_iter25_reg = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state23_io)) or ((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state22_io)));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_io_assign_proc : process(tmp_16_reg_523, ap_sig_ioackin_m_axi_eventSlice_AWREADY)
    begin
                ap_block_state22_io <= ((ap_sig_ioackin_m_axi_eventSlice_AWREADY = ap_const_logic_0) and (tmp_16_reg_523 = ap_const_lv1_1));
    end process;

        ap_block_state22_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state23_io_assign_proc : process(exitcond_flatten_reg_454_pp0_iter20_reg, ap_sig_ioackin_m_axi_eventSlice_WREADY)
    begin
                ap_block_state23_io <= ((exitcond_flatten_reg_454_pp0_iter20_reg = ap_const_lv1_0) and (ap_sig_ioackin_m_axi_eventSlice_WREADY = ap_const_logic_0));
    end process;

        ap_block_state23_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state28_pp0_stage0_iter26_assign_proc : process(m_axi_eventSlice_BVALID, tmp_18_reg_527_pp0_iter25_reg)
    begin
                ap_block_state28_pp0_stage0_iter26 <= ((m_axi_eventSlice_BVALID = ap_const_logic_0) and (tmp_18_reg_527_pp0_iter25_reg = ap_const_lv1_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_232_p2)
    begin
        if ((exitcond_flatten_fu_232_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25)
    begin
        if (((ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_184_p4_assign_proc : process(ap_block_pp0_stage0, exitcond_flatten_reg_454, ap_CS_fsm_pp0_stage0, i_reg_180, tmp_mid2_v_reg_470, ap_enable_reg_pp0_iter1)
    begin
        if (((exitcond_flatten_reg_454 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_184_p4 <= tmp_mid2_v_reg_470;
        else 
            ap_phi_mux_i_phi_fu_184_p4 <= i_reg_180;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_172_p4_assign_proc : process(ap_block_pp0_stage0, exitcond_flatten_reg_454, indvar_flatten_reg_168, ap_CS_fsm_pp0_stage0, indvar_flatten_next_reg_458, ap_enable_reg_pp0_iter1)
    begin
        if (((exitcond_flatten_reg_454 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_172_p4 <= indvar_flatten_next_reg_458;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_172_p4 <= indvar_flatten_reg_168;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_eventSlice_AWREADY_assign_proc : process(m_axi_eventSlice_AWREADY, ap_reg_ioackin_m_axi_eventSlice_AWREADY)
    begin
        if ((ap_reg_ioackin_m_axi_eventSlice_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_eventSlice_AWREADY <= m_axi_eventSlice_AWREADY;
        else 
            ap_sig_ioackin_m_axi_eventSlice_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_eventSlice_WREADY_assign_proc : process(m_axi_eventSlice_WREADY, ap_reg_ioackin_m_axi_eventSlice_WREADY)
    begin
        if ((ap_reg_ioackin_m_axi_eventSlice_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_eventSlice_WREADY <= m_axi_eventSlice_WREADY;
        else 
            ap_sig_ioackin_m_axi_eventSlice_WREADY <= ap_const_logic_1;
        end if; 
    end process;

        arrayNo_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_reg_488_pp0_iter12_reg),8));


    eventSlice_blk_n_AW_assign_proc : process(m_axi_eventSlice_AWREADY, ap_enable_reg_pp0_iter20, ap_block_pp0_stage0, tmp_16_reg_523)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (tmp_16_reg_523 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            eventSlice_blk_n_AW <= m_axi_eventSlice_AWREADY;
        else 
            eventSlice_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    eventSlice_blk_n_B_assign_proc : process(m_axi_eventSlice_BVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter26, tmp_18_reg_527_pp0_iter25_reg)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (tmp_18_reg_527_pp0_iter25_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            eventSlice_blk_n_B <= m_axi_eventSlice_BVALID;
        else 
            eventSlice_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    eventSlice_blk_n_W_assign_proc : process(m_axi_eventSlice_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter21, exitcond_flatten_reg_454_pp0_iter20_reg)
    begin
        if (((exitcond_flatten_reg_454_pp0_iter20_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            eventSlice_blk_n_W <= m_axi_eventSlice_WREADY;
        else 
            eventSlice_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    exitcond_flatten_fu_232_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_172_p4 = ap_const_lv16_A8C0) else "0";
    exitcond_fu_250_p2 <= "1" when (j_reg_191 = ap_const_lv8_F0) else "0";
    glPLSlices_0_address0 <= tmp_72_cast_fu_408_p1(15 - 1 downto 0);

    glPLSlices_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            glPLSlices_0_ce0 <= ap_const_logic_1;
        else 
            glPLSlices_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    glPLSlices_1_address0 <= tmp_72_cast_fu_408_p1(15 - 1 downto 0);

    glPLSlices_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            glPLSlices_1_ce0 <= ap_const_logic_1;
        else 
            glPLSlices_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    glPLSlices_2_address0 <= tmp_72_cast_fu_408_p1(15 - 1 downto 0);

    glPLSlices_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            glPLSlices_2_ce0 <= ap_const_logic_1;
        else 
            glPLSlices_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    glPLSlices_3_address0 <= tmp_72_cast_fu_408_p1(15 - 1 downto 0);

    glPLSlices_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            glPLSlices_3_ce0 <= ap_const_logic_1;
        else 
            glPLSlices_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_314_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_314_ce <= ap_const_logic_1;
        else 
            grp_fu_314_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_314_p1 <= ap_const_lv8_3C(7 - 1 downto 0);

    grp_fu_331_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_331_ce <= ap_const_logic_1;
        else 
            grp_fu_331_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_331_p1 <= ap_const_lv16_F0(9 - 1 downto 0);

    grp_fu_362_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_362_ce <= ap_const_logic_1;
        else 
            grp_fu_362_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_362_p1 <= ap_const_lv16_F0(9 - 1 downto 0);
    i_3_fu_244_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_184_p4) + unsigned(ap_const_lv8_1));
    indvar_flatten_next_fu_238_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_172_p4) + unsigned(ap_const_lv16_1));
    j_1_fu_337_p2 <= std_logic_vector(unsigned(j_mid2_fu_256_p3) + unsigned(ap_const_lv8_1));
    j_mid2_fu_256_p3 <= 
        ap_const_lv8_0 when (exitcond_fu_250_p2(0) = '1') else 
        j_reg_191;
    m_axi_eventSlice_ARADDR <= ap_const_lv32_0;
    m_axi_eventSlice_ARBURST <= ap_const_lv2_0;
    m_axi_eventSlice_ARCACHE <= ap_const_lv4_0;
    m_axi_eventSlice_ARID <= ap_const_lv1_0;
    m_axi_eventSlice_ARLEN <= ap_const_lv32_0;
    m_axi_eventSlice_ARLOCK <= ap_const_lv2_0;
    m_axi_eventSlice_ARPROT <= ap_const_lv3_0;
    m_axi_eventSlice_ARQOS <= ap_const_lv4_0;
    m_axi_eventSlice_ARREGION <= ap_const_lv4_0;
    m_axi_eventSlice_ARSIZE <= ap_const_lv3_0;
    m_axi_eventSlice_ARUSER <= ap_const_lv1_0;
    m_axi_eventSlice_ARVALID <= ap_const_logic_0;
    m_axi_eventSlice_AWADDR <= eventSlice_addr_reg_477_pp0_iter19_reg;
    m_axi_eventSlice_AWBURST <= ap_const_lv2_0;
    m_axi_eventSlice_AWCACHE <= ap_const_lv4_0;
    m_axi_eventSlice_AWID <= ap_const_lv1_0;
    m_axi_eventSlice_AWLEN <= ap_const_lv32_F0;
    m_axi_eventSlice_AWLOCK <= ap_const_lv2_0;
    m_axi_eventSlice_AWPROT <= ap_const_lv3_0;
    m_axi_eventSlice_AWQOS <= ap_const_lv4_0;
    m_axi_eventSlice_AWREGION <= ap_const_lv4_0;
    m_axi_eventSlice_AWSIZE <= ap_const_lv3_0;
    m_axi_eventSlice_AWUSER <= ap_const_lv1_0;

    m_axi_eventSlice_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter20, tmp_16_reg_523, ap_reg_ioackin_m_axi_eventSlice_AWREADY, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_reg_ioackin_m_axi_eventSlice_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (tmp_16_reg_523 = ap_const_lv1_1))) then 
            m_axi_eventSlice_AWVALID <= ap_const_logic_1;
        else 
            m_axi_eventSlice_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_eventSlice_BREADY_assign_proc : process(ap_enable_reg_pp0_iter26, tmp_18_reg_527_pp0_iter25_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_18_reg_527_pp0_iter25_reg = ap_const_lv1_1))) then 
            m_axi_eventSlice_BREADY <= ap_const_logic_1;
        else 
            m_axi_eventSlice_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_eventSlice_RREADY <= ap_const_logic_0;
    m_axi_eventSlice_WDATA <= tmp_8_reg_518_pp0_iter20_reg;
    m_axi_eventSlice_WID <= ap_const_lv1_0;
    m_axi_eventSlice_WLAST <= ap_const_logic_0;
    m_axi_eventSlice_WSTRB <= ap_const_lv1_1;
    m_axi_eventSlice_WUSER <= ap_const_lv1_0;

    m_axi_eventSlice_WVALID_assign_proc : process(ap_enable_reg_pp0_iter21, exitcond_flatten_reg_454_pp0_iter20_reg, ap_block_pp0_stage0_01001, ap_reg_ioackin_m_axi_eventSlice_WREADY)
    begin
        if (((exitcond_flatten_reg_454_pp0_iter20_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_reg_ioackin_m_axi_eventSlice_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1))) then 
            m_axi_eventSlice_WVALID <= ap_const_logic_1;
        else 
            m_axi_eventSlice_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    mul_fu_346_p0 <= mul_fu_346_p00(8 - 1 downto 0);
    mul_fu_346_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_464),18));
    mul_fu_346_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_fu_346_p0) * unsigned(ap_const_lv18_112), 18));
    newIndex2_cast_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex_reg_493),16));
    p_shl1_cast_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_214_p3),17));
    p_shl1_cast_mid1_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_mid1_fu_284_p3),17));
    p_shl1_fu_214_p3 <= (ap_phi_mux_i_phi_fu_184_p4 & ap_const_lv4_0);
    p_shl1_mid1_fu_284_p3 <= (i_3_fu_244_p2 & ap_const_lv4_0);
    p_shl4_cast_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_367_p3),15));
    p_shl5_cast_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_63_fu_378_p3),15));
    p_shl_cast_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_202_p3),17));
    p_shl_cast_mid1_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_mid1_fu_272_p3),17));
    p_shl_fu_202_p3 <= (ap_phi_mux_i_phi_fu_184_p4 & ap_const_lv8_0);
    p_shl_mid1_fu_272_p3 <= (i_3_fu_244_p2 & ap_const_lv8_0);
    sum2_fu_320_p2 <= std_logic_vector(unsigned(eventSlice_offset) + unsigned(tmp_7_mid2_fu_310_p1));
    tmp_16_fu_437_p2 <= "1" when (grp_fu_331_p2 = ap_const_lv16_0) else "0";
    tmp_18_fu_443_p2 <= "1" when (grp_fu_362_p2 = ap_const_lv16_0) else "0";
    tmp_63_fu_378_p3 <= (tmp_mid2_v_reg_470_pp0_iter11_reg & ap_const_lv2_0);
    tmp_64_fu_389_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_374_p1) - unsigned(p_shl5_cast_fu_385_p1));
    tmp_65_fu_402_p2 <= std_logic_vector(signed(tmp_71_cast_fu_395_p1) + signed(newIndex2_cast_fu_399_p1));
        tmp_71_cast_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_64_fu_389_p2),16));

        tmp_72_cast_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_65_fu_402_p2),32));

        tmp_7_mid2_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_mid2_fu_302_p3),32));

    tmp_8_fu_423_p5 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayNo_fu_416_p1),16));
    tmp_fu_367_p3 <= (tmp_mid2_v_reg_470_pp0_iter11_reg & ap_const_lv6_0);
    tmp_mid1_fu_296_p2 <= std_logic_vector(unsigned(p_shl_cast_mid1_fu_280_p1) - unsigned(p_shl1_cast_mid1_fu_292_p1));
    tmp_mid2_fu_302_p3 <= 
        tmp_mid1_fu_296_p2 when (exitcond_fu_250_p2(0) = '1') else 
        tmp_s_fu_226_p2;
    tmp_mid2_v_fu_264_p3 <= 
        i_3_fu_244_p2 when (exitcond_fu_250_p2(0) = '1') else 
        ap_phi_mux_i_phi_fu_184_p4;
    tmp_s_fu_226_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_210_p1) - unsigned(p_shl1_cast_fu_222_p1));
end behav;
