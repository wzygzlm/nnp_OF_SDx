-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a0_parseEvents is
generic (
    C_M_AXI_EVENTSLICE_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_EVENTSLICE_ID_WIDTH : INTEGER := 1;
    C_M_AXI_EVENTSLICE_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_EVENTSLICE_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_EVENTSLICE_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_EVENTSLICE_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_EVENTSLICE_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_EVENTSLICE_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_EVENTSLICE_USER_VALUE : INTEGER := 0;
    C_M_AXI_EVENTSLICE_PROT_VALUE : INTEGER := 0;
    C_M_AXI_EVENTSLICE_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_eventSlice_AWVALID : OUT STD_LOGIC;
    m_axi_eventSlice_AWREADY : IN STD_LOGIC;
    m_axi_eventSlice_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_EVENTSLICE_ADDR_WIDTH-1 downto 0);
    m_axi_eventSlice_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_EVENTSLICE_ID_WIDTH-1 downto 0);
    m_axi_eventSlice_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_eventSlice_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_eventSlice_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_eventSlice_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_eventSlice_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_eventSlice_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_eventSlice_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_eventSlice_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_eventSlice_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_EVENTSLICE_AWUSER_WIDTH-1 downto 0);
    m_axi_eventSlice_WVALID : OUT STD_LOGIC;
    m_axi_eventSlice_WREADY : IN STD_LOGIC;
    m_axi_eventSlice_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_EVENTSLICE_DATA_WIDTH-1 downto 0);
    m_axi_eventSlice_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_EVENTSLICE_DATA_WIDTH/8-1 downto 0);
    m_axi_eventSlice_WLAST : OUT STD_LOGIC;
    m_axi_eventSlice_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_EVENTSLICE_ID_WIDTH-1 downto 0);
    m_axi_eventSlice_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_EVENTSLICE_WUSER_WIDTH-1 downto 0);
    m_axi_eventSlice_ARVALID : OUT STD_LOGIC;
    m_axi_eventSlice_ARREADY : IN STD_LOGIC;
    m_axi_eventSlice_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_EVENTSLICE_ADDR_WIDTH-1 downto 0);
    m_axi_eventSlice_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_EVENTSLICE_ID_WIDTH-1 downto 0);
    m_axi_eventSlice_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_eventSlice_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_eventSlice_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_eventSlice_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_eventSlice_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_eventSlice_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_eventSlice_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_eventSlice_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_eventSlice_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_EVENTSLICE_ARUSER_WIDTH-1 downto 0);
    m_axi_eventSlice_RVALID : IN STD_LOGIC;
    m_axi_eventSlice_RREADY : OUT STD_LOGIC;
    m_axi_eventSlice_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_EVENTSLICE_DATA_WIDTH-1 downto 0);
    m_axi_eventSlice_RLAST : IN STD_LOGIC;
    m_axi_eventSlice_RID : IN STD_LOGIC_VECTOR (C_M_AXI_EVENTSLICE_ID_WIDTH-1 downto 0);
    m_axi_eventSlice_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_EVENTSLICE_RUSER_WIDTH-1 downto 0);
    m_axi_eventSlice_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_eventSlice_BVALID : IN STD_LOGIC;
    m_axi_eventSlice_BREADY : OUT STD_LOGIC;
    m_axi_eventSlice_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_eventSlice_BID : IN STD_LOGIC_VECTOR (C_M_AXI_EVENTSLICE_ID_WIDTH-1 downto 0);
    m_axi_eventSlice_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_EVENTSLICE_BUSER_WIDTH-1 downto 0);
    data_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    data_empty_n : IN STD_LOGIC;
    data_read : OUT STD_LOGIC;
    eventsArraySize : IN STD_LOGIC_VECTOR (31 downto 0);
    eventSlice_offset : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of a0_parseEvents is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "a0_parseEvents,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z007sclg225-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.381000,HLS_SYN_LAT=58653,HLS_SYN_TPT=none,HLS_SYN_MEM=66,HLS_SYN_DSP=1,HLS_SYN_FF=3730,HLS_SYN_LUT=6499}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv15_2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_3C : STD_LOGIC_VECTOR (14 downto 0) := "000000000111100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_8889 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000100010001001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal glPLSlices_0_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal glPLSlices_0_ce0 : STD_LOGIC;
    signal glPLSlices_0_we0 : STD_LOGIC;
    signal glPLSlices_0_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal glPLSlices_0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal glPLSlices_0_ce1 : STD_LOGIC;
    signal glPLSlices_0_we1 : STD_LOGIC;
    signal glPLSlices_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal glPLSlices_1_ce0 : STD_LOGIC;
    signal glPLSlices_1_we0 : STD_LOGIC;
    signal glPLSlices_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal glPLSlices_1_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal glPLSlices_1_ce1 : STD_LOGIC;
    signal glPLSlices_1_we1 : STD_LOGIC;
    signal glPLSlices_2_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal glPLSlices_2_ce0 : STD_LOGIC;
    signal glPLSlices_2_we0 : STD_LOGIC;
    signal glPLSlices_2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal glPLSlices_2_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal glPLSlices_2_ce1 : STD_LOGIC;
    signal glPLSlices_2_we1 : STD_LOGIC;
    signal glPLSlices_3_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal glPLSlices_3_ce0 : STD_LOGIC;
    signal glPLSlices_3_we0 : STD_LOGIC;
    signal glPLSlices_3_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal glPLSlices_3_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal glPLSlices_3_ce1 : STD_LOGIC;
    signal glPLSlices_3_we1 : STD_LOGIC;
    signal data_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal tmp_9_reg_463 : STD_LOGIC_VECTOR (0 downto 0);
    signal eventSlice_AWVALID : STD_LOGIC;
    signal eventSlice_AWREADY : STD_LOGIC;
    signal eventSlice_WVALID : STD_LOGIC;
    signal eventSlice_WREADY : STD_LOGIC;
    signal eventSlice_ARREADY : STD_LOGIC;
    signal eventSlice_RVALID : STD_LOGIC;
    signal eventSlice_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal eventSlice_RLAST : STD_LOGIC;
    signal eventSlice_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal eventSlice_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal eventSlice_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal eventSlice_BVALID : STD_LOGIC;
    signal eventSlice_BREADY : STD_LOGIC;
    signal eventSlice_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal eventSlice_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal eventSlice_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_190 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_resetCurrentSliceHW_fu_217_ap_idle : STD_LOGIC;
    signal grp_resetCurrentSliceHW_fu_217_ap_ready : STD_LOGIC;
    signal grp_resetCurrentSliceHW_fu_217_ap_done : STD_LOGIC;
    signal tmp_8_fu_305_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_458 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_cast_reg_467 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state22_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state24_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_10_fu_328_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_473 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_473_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_473_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_473_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_473_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_473_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_473_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_473_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_473_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_473_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_473_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_477 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_reg_477_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_reg_477_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_reg_477_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_reg_477_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_reg_477_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_reg_477_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_reg_477_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_reg_477_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_reg_477_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_reg_482 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_12_reg_482_pp0_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_12_reg_482_pp0_iter2_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_12_reg_482_pp0_iter3_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_12_reg_482_pp0_iter4_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_12_reg_482_pp0_iter5_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_12_reg_482_pp0_iter6_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_12_reg_482_pp0_iter7_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_12_reg_482_pp0_iter8_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_12_reg_482_pp0_iter9_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal i_2_fu_356_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_487 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_fu_447_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_492 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_497 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_reg_497_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_reg_497_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_reg_497_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_reg_497_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_reg_497_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_reg_497_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_reg_497_pp0_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_reg_497_pp0_iter9_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_reg_497_pp0_iter10_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_365_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal newIndex_i_reg_502 : STD_LOGIC_VECTOR (14 downto 0);
    signal glPLSlices_0_addr_reg_507 : STD_LOGIC_VECTOR (14 downto 0);
    signal glPLSlices_1_addr_reg_512 : STD_LOGIC_VECTOR (14 downto 0);
    signal glPLSlices_2_addr_reg_517 : STD_LOGIC_VECTOR (14 downto 0);
    signal glPLSlices_3_addr_reg_522 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal grp_copyToPS_fu_202_ap_start : STD_LOGIC;
    signal grp_copyToPS_fu_202_ap_done : STD_LOGIC;
    signal grp_copyToPS_fu_202_ap_idle : STD_LOGIC;
    signal grp_copyToPS_fu_202_ap_ready : STD_LOGIC;
    signal grp_copyToPS_fu_202_m_axi_eventSlice_AWVALID : STD_LOGIC;
    signal grp_copyToPS_fu_202_m_axi_eventSlice_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copyToPS_fu_202_m_axi_eventSlice_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copyToPS_fu_202_m_axi_eventSlice_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copyToPS_fu_202_m_axi_eventSlice_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copyToPS_fu_202_m_axi_eventSlice_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copyToPS_fu_202_m_axi_eventSlice_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copyToPS_fu_202_m_axi_eventSlice_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copyToPS_fu_202_m_axi_eventSlice_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copyToPS_fu_202_m_axi_eventSlice_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copyToPS_fu_202_m_axi_eventSlice_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copyToPS_fu_202_m_axi_eventSlice_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copyToPS_fu_202_m_axi_eventSlice_WVALID : STD_LOGIC;
    signal grp_copyToPS_fu_202_m_axi_eventSlice_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_copyToPS_fu_202_m_axi_eventSlice_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copyToPS_fu_202_m_axi_eventSlice_WLAST : STD_LOGIC;
    signal grp_copyToPS_fu_202_m_axi_eventSlice_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copyToPS_fu_202_m_axi_eventSlice_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copyToPS_fu_202_m_axi_eventSlice_ARVALID : STD_LOGIC;
    signal grp_copyToPS_fu_202_m_axi_eventSlice_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copyToPS_fu_202_m_axi_eventSlice_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copyToPS_fu_202_m_axi_eventSlice_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_copyToPS_fu_202_m_axi_eventSlice_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copyToPS_fu_202_m_axi_eventSlice_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copyToPS_fu_202_m_axi_eventSlice_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_copyToPS_fu_202_m_axi_eventSlice_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copyToPS_fu_202_m_axi_eventSlice_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_copyToPS_fu_202_m_axi_eventSlice_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copyToPS_fu_202_m_axi_eventSlice_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_copyToPS_fu_202_m_axi_eventSlice_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_copyToPS_fu_202_m_axi_eventSlice_RREADY : STD_LOGIC;
    signal grp_copyToPS_fu_202_m_axi_eventSlice_BREADY : STD_LOGIC;
    signal grp_copyToPS_fu_202_glPLSlices_0_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_copyToPS_fu_202_glPLSlices_0_ce0 : STD_LOGIC;
    signal grp_copyToPS_fu_202_glPLSlices_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_copyToPS_fu_202_glPLSlices_1_ce0 : STD_LOGIC;
    signal grp_copyToPS_fu_202_glPLSlices_2_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_copyToPS_fu_202_glPLSlices_2_ce0 : STD_LOGIC;
    signal grp_copyToPS_fu_202_glPLSlices_3_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_copyToPS_fu_202_glPLSlices_3_ce0 : STD_LOGIC;
    signal grp_resetCurrentSliceHW_fu_217_ap_start : STD_LOGIC;
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_0_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_0_ce0 : STD_LOGIC;
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_0_we0 : STD_LOGIC;
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_0_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_0_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_0_ce1 : STD_LOGIC;
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_0_we1 : STD_LOGIC;
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_0_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_1_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_1_ce0 : STD_LOGIC;
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_1_we0 : STD_LOGIC;
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_1_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_1_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_1_ce1 : STD_LOGIC;
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_1_we1 : STD_LOGIC;
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_1_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_2_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_2_ce0 : STD_LOGIC;
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_2_we0 : STD_LOGIC;
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_2_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_2_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_2_ce1 : STD_LOGIC;
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_2_we1 : STD_LOGIC;
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_2_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_3_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_3_ce0 : STD_LOGIC;
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_3_we0 : STD_LOGIC;
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_3_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_3_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_3_ce1 : STD_LOGIC;
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_3_we1 : STD_LOGIC;
    signal grp_resetCurrentSliceHW_fu_217_glPLSlices_3_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_i_phi_fu_194_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_copyToPS_fu_202_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal grp_resetCurrentSliceHW_fu_217_ap_start_reg : STD_LOGIC := '0';
    signal tmp_69_cast_fu_408_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal arrayNo_i_fu_416_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_3_i_fu_437_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_op_op9_fu_243_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg_fu_257_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_fu_263_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_fu_249_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_273_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_5_fu_279_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_3_fu_235_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_289_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_7_fu_297_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_365_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_cast_fu_379_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl3_cast_fu_386_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal newIndex1_i_cast_fu_399_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_393_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_62_fu_402_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_423_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_423_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_fu_447_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_fu_447_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_365_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_fu_447_p00 : STD_LOGIC_VECTOR (31 downto 0);

    component a0_copyToPS IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_eventSlice_AWVALID : OUT STD_LOGIC;
        m_axi_eventSlice_AWREADY : IN STD_LOGIC;
        m_axi_eventSlice_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_eventSlice_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_eventSlice_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_eventSlice_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_eventSlice_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_eventSlice_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_eventSlice_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_eventSlice_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_eventSlice_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_eventSlice_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_eventSlice_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_eventSlice_WVALID : OUT STD_LOGIC;
        m_axi_eventSlice_WREADY : IN STD_LOGIC;
        m_axi_eventSlice_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_eventSlice_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_eventSlice_WLAST : OUT STD_LOGIC;
        m_axi_eventSlice_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_eventSlice_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_eventSlice_ARVALID : OUT STD_LOGIC;
        m_axi_eventSlice_ARREADY : IN STD_LOGIC;
        m_axi_eventSlice_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_eventSlice_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_eventSlice_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_eventSlice_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_eventSlice_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_eventSlice_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_eventSlice_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_eventSlice_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_eventSlice_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_eventSlice_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_eventSlice_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_eventSlice_RVALID : IN STD_LOGIC;
        m_axi_eventSlice_RREADY : OUT STD_LOGIC;
        m_axi_eventSlice_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_eventSlice_RLAST : IN STD_LOGIC;
        m_axi_eventSlice_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_eventSlice_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_eventSlice_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_eventSlice_BVALID : IN STD_LOGIC;
        m_axi_eventSlice_BREADY : OUT STD_LOGIC;
        m_axi_eventSlice_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_eventSlice_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_eventSlice_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        eventSlice_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        glPLSlices_0_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        glPLSlices_0_ce0 : OUT STD_LOGIC;
        glPLSlices_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        glPLSlices_1_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        glPLSlices_1_ce0 : OUT STD_LOGIC;
        glPLSlices_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        glPLSlices_2_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        glPLSlices_2_ce0 : OUT STD_LOGIC;
        glPLSlices_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        glPLSlices_3_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        glPLSlices_3_ce0 : OUT STD_LOGIC;
        glPLSlices_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component a0_resetCurrentSliceHW IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        glPLSlices_0_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        glPLSlices_0_ce0 : OUT STD_LOGIC;
        glPLSlices_0_we0 : OUT STD_LOGIC;
        glPLSlices_0_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        glPLSlices_0_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        glPLSlices_0_ce1 : OUT STD_LOGIC;
        glPLSlices_0_we1 : OUT STD_LOGIC;
        glPLSlices_0_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        glPLSlices_1_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        glPLSlices_1_ce0 : OUT STD_LOGIC;
        glPLSlices_1_we0 : OUT STD_LOGIC;
        glPLSlices_1_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        glPLSlices_1_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        glPLSlices_1_ce1 : OUT STD_LOGIC;
        glPLSlices_1_we1 : OUT STD_LOGIC;
        glPLSlices_1_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        glPLSlices_2_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        glPLSlices_2_ce0 : OUT STD_LOGIC;
        glPLSlices_2_we0 : OUT STD_LOGIC;
        glPLSlices_2_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        glPLSlices_2_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        glPLSlices_2_ce1 : OUT STD_LOGIC;
        glPLSlices_2_we1 : OUT STD_LOGIC;
        glPLSlices_2_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        glPLSlices_3_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        glPLSlices_3_ce0 : OUT STD_LOGIC;
        glPLSlices_3_we0 : OUT STD_LOGIC;
        glPLSlices_3_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        glPLSlices_3_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
        glPLSlices_3_ce1 : OUT STD_LOGIC;
        glPLSlices_3_we1 : OUT STD_LOGIC;
        glPLSlices_3_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component a0_parseEvents_urem_ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component a0_parseEvents_mux_4dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component a0_parseEvents_mul_mjbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component a0_parseEvents_glPLSeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component a0_parseEvents_eventSlice_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    glPLSlices_0_U : component a0_parseEvents_glPLSeOg
    generic map (
        DataWidth => 8,
        AddressRange => 32400,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => glPLSlices_0_address0,
        ce0 => glPLSlices_0_ce0,
        we0 => glPLSlices_0_we0,
        d0 => glPLSlices_0_d0,
        q0 => glPLSlices_0_q0,
        address1 => grp_resetCurrentSliceHW_fu_217_glPLSlices_0_address1,
        ce1 => glPLSlices_0_ce1,
        we1 => glPLSlices_0_we1,
        d1 => grp_resetCurrentSliceHW_fu_217_glPLSlices_0_d1);

    glPLSlices_1_U : component a0_parseEvents_glPLSeOg
    generic map (
        DataWidth => 8,
        AddressRange => 32400,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => glPLSlices_1_address0,
        ce0 => glPLSlices_1_ce0,
        we0 => glPLSlices_1_we0,
        d0 => glPLSlices_1_d0,
        q0 => glPLSlices_1_q0,
        address1 => grp_resetCurrentSliceHW_fu_217_glPLSlices_1_address1,
        ce1 => glPLSlices_1_ce1,
        we1 => glPLSlices_1_we1,
        d1 => grp_resetCurrentSliceHW_fu_217_glPLSlices_1_d1);

    glPLSlices_2_U : component a0_parseEvents_glPLSeOg
    generic map (
        DataWidth => 8,
        AddressRange => 32400,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => glPLSlices_2_address0,
        ce0 => glPLSlices_2_ce0,
        we0 => glPLSlices_2_we0,
        d0 => glPLSlices_2_d0,
        q0 => glPLSlices_2_q0,
        address1 => grp_resetCurrentSliceHW_fu_217_glPLSlices_2_address1,
        ce1 => glPLSlices_2_ce1,
        we1 => glPLSlices_2_we1,
        d1 => grp_resetCurrentSliceHW_fu_217_glPLSlices_2_d1);

    glPLSlices_3_U : component a0_parseEvents_glPLSeOg
    generic map (
        DataWidth => 8,
        AddressRange => 32400,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => glPLSlices_3_address0,
        ce0 => glPLSlices_3_ce0,
        we0 => glPLSlices_3_we0,
        d0 => glPLSlices_3_d0,
        q0 => glPLSlices_3_q0,
        address1 => grp_resetCurrentSliceHW_fu_217_glPLSlices_3_address1,
        ce1 => glPLSlices_3_ce1,
        we1 => glPLSlices_3_we1,
        d1 => grp_resetCurrentSliceHW_fu_217_glPLSlices_3_d1);

    parseEvents_eventSlice_m_axi_U : component a0_parseEvents_eventSlice_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 8,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_EVENTSLICE_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_EVENTSLICE_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_EVENTSLICE_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_EVENTSLICE_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_EVENTSLICE_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_EVENTSLICE_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_EVENTSLICE_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_EVENTSLICE_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_EVENTSLICE_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_EVENTSLICE_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_EVENTSLICE_CACHE_VALUE)
    port map (
        AWVALID => m_axi_eventSlice_AWVALID,
        AWREADY => m_axi_eventSlice_AWREADY,
        AWADDR => m_axi_eventSlice_AWADDR,
        AWID => m_axi_eventSlice_AWID,
        AWLEN => m_axi_eventSlice_AWLEN,
        AWSIZE => m_axi_eventSlice_AWSIZE,
        AWBURST => m_axi_eventSlice_AWBURST,
        AWLOCK => m_axi_eventSlice_AWLOCK,
        AWCACHE => m_axi_eventSlice_AWCACHE,
        AWPROT => m_axi_eventSlice_AWPROT,
        AWQOS => m_axi_eventSlice_AWQOS,
        AWREGION => m_axi_eventSlice_AWREGION,
        AWUSER => m_axi_eventSlice_AWUSER,
        WVALID => m_axi_eventSlice_WVALID,
        WREADY => m_axi_eventSlice_WREADY,
        WDATA => m_axi_eventSlice_WDATA,
        WSTRB => m_axi_eventSlice_WSTRB,
        WLAST => m_axi_eventSlice_WLAST,
        WID => m_axi_eventSlice_WID,
        WUSER => m_axi_eventSlice_WUSER,
        ARVALID => m_axi_eventSlice_ARVALID,
        ARREADY => m_axi_eventSlice_ARREADY,
        ARADDR => m_axi_eventSlice_ARADDR,
        ARID => m_axi_eventSlice_ARID,
        ARLEN => m_axi_eventSlice_ARLEN,
        ARSIZE => m_axi_eventSlice_ARSIZE,
        ARBURST => m_axi_eventSlice_ARBURST,
        ARLOCK => m_axi_eventSlice_ARLOCK,
        ARCACHE => m_axi_eventSlice_ARCACHE,
        ARPROT => m_axi_eventSlice_ARPROT,
        ARQOS => m_axi_eventSlice_ARQOS,
        ARREGION => m_axi_eventSlice_ARREGION,
        ARUSER => m_axi_eventSlice_ARUSER,
        RVALID => m_axi_eventSlice_RVALID,
        RREADY => m_axi_eventSlice_RREADY,
        RDATA => m_axi_eventSlice_RDATA,
        RLAST => m_axi_eventSlice_RLAST,
        RID => m_axi_eventSlice_RID,
        RUSER => m_axi_eventSlice_RUSER,
        RRESP => m_axi_eventSlice_RRESP,
        BVALID => m_axi_eventSlice_BVALID,
        BREADY => m_axi_eventSlice_BREADY,
        BRESP => m_axi_eventSlice_BRESP,
        BID => m_axi_eventSlice_BID,
        BUSER => m_axi_eventSlice_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => eventSlice_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => eventSlice_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => eventSlice_RDATA,
        I_RID => eventSlice_RID,
        I_RUSER => eventSlice_RUSER,
        I_RRESP => eventSlice_RRESP,
        I_RLAST => eventSlice_RLAST,
        I_AWVALID => eventSlice_AWVALID,
        I_AWREADY => eventSlice_AWREADY,
        I_AWADDR => grp_copyToPS_fu_202_m_axi_eventSlice_AWADDR,
        I_AWID => grp_copyToPS_fu_202_m_axi_eventSlice_AWID,
        I_AWLEN => grp_copyToPS_fu_202_m_axi_eventSlice_AWLEN,
        I_AWSIZE => grp_copyToPS_fu_202_m_axi_eventSlice_AWSIZE,
        I_AWLOCK => grp_copyToPS_fu_202_m_axi_eventSlice_AWLOCK,
        I_AWCACHE => grp_copyToPS_fu_202_m_axi_eventSlice_AWCACHE,
        I_AWQOS => grp_copyToPS_fu_202_m_axi_eventSlice_AWQOS,
        I_AWPROT => grp_copyToPS_fu_202_m_axi_eventSlice_AWPROT,
        I_AWUSER => grp_copyToPS_fu_202_m_axi_eventSlice_AWUSER,
        I_AWBURST => grp_copyToPS_fu_202_m_axi_eventSlice_AWBURST,
        I_AWREGION => grp_copyToPS_fu_202_m_axi_eventSlice_AWREGION,
        I_WVALID => eventSlice_WVALID,
        I_WREADY => eventSlice_WREADY,
        I_WDATA => grp_copyToPS_fu_202_m_axi_eventSlice_WDATA,
        I_WID => grp_copyToPS_fu_202_m_axi_eventSlice_WID,
        I_WUSER => grp_copyToPS_fu_202_m_axi_eventSlice_WUSER,
        I_WLAST => grp_copyToPS_fu_202_m_axi_eventSlice_WLAST,
        I_WSTRB => grp_copyToPS_fu_202_m_axi_eventSlice_WSTRB,
        I_BVALID => eventSlice_BVALID,
        I_BREADY => eventSlice_BREADY,
        I_BRESP => eventSlice_BRESP,
        I_BID => eventSlice_BID,
        I_BUSER => eventSlice_BUSER);

    grp_copyToPS_fu_202 : component a0_copyToPS
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_copyToPS_fu_202_ap_start,
        ap_done => grp_copyToPS_fu_202_ap_done,
        ap_idle => grp_copyToPS_fu_202_ap_idle,
        ap_ready => grp_copyToPS_fu_202_ap_ready,
        m_axi_eventSlice_AWVALID => grp_copyToPS_fu_202_m_axi_eventSlice_AWVALID,
        m_axi_eventSlice_AWREADY => eventSlice_AWREADY,
        m_axi_eventSlice_AWADDR => grp_copyToPS_fu_202_m_axi_eventSlice_AWADDR,
        m_axi_eventSlice_AWID => grp_copyToPS_fu_202_m_axi_eventSlice_AWID,
        m_axi_eventSlice_AWLEN => grp_copyToPS_fu_202_m_axi_eventSlice_AWLEN,
        m_axi_eventSlice_AWSIZE => grp_copyToPS_fu_202_m_axi_eventSlice_AWSIZE,
        m_axi_eventSlice_AWBURST => grp_copyToPS_fu_202_m_axi_eventSlice_AWBURST,
        m_axi_eventSlice_AWLOCK => grp_copyToPS_fu_202_m_axi_eventSlice_AWLOCK,
        m_axi_eventSlice_AWCACHE => grp_copyToPS_fu_202_m_axi_eventSlice_AWCACHE,
        m_axi_eventSlice_AWPROT => grp_copyToPS_fu_202_m_axi_eventSlice_AWPROT,
        m_axi_eventSlice_AWQOS => grp_copyToPS_fu_202_m_axi_eventSlice_AWQOS,
        m_axi_eventSlice_AWREGION => grp_copyToPS_fu_202_m_axi_eventSlice_AWREGION,
        m_axi_eventSlice_AWUSER => grp_copyToPS_fu_202_m_axi_eventSlice_AWUSER,
        m_axi_eventSlice_WVALID => grp_copyToPS_fu_202_m_axi_eventSlice_WVALID,
        m_axi_eventSlice_WREADY => eventSlice_WREADY,
        m_axi_eventSlice_WDATA => grp_copyToPS_fu_202_m_axi_eventSlice_WDATA,
        m_axi_eventSlice_WSTRB => grp_copyToPS_fu_202_m_axi_eventSlice_WSTRB,
        m_axi_eventSlice_WLAST => grp_copyToPS_fu_202_m_axi_eventSlice_WLAST,
        m_axi_eventSlice_WID => grp_copyToPS_fu_202_m_axi_eventSlice_WID,
        m_axi_eventSlice_WUSER => grp_copyToPS_fu_202_m_axi_eventSlice_WUSER,
        m_axi_eventSlice_ARVALID => grp_copyToPS_fu_202_m_axi_eventSlice_ARVALID,
        m_axi_eventSlice_ARREADY => ap_const_logic_0,
        m_axi_eventSlice_ARADDR => grp_copyToPS_fu_202_m_axi_eventSlice_ARADDR,
        m_axi_eventSlice_ARID => grp_copyToPS_fu_202_m_axi_eventSlice_ARID,
        m_axi_eventSlice_ARLEN => grp_copyToPS_fu_202_m_axi_eventSlice_ARLEN,
        m_axi_eventSlice_ARSIZE => grp_copyToPS_fu_202_m_axi_eventSlice_ARSIZE,
        m_axi_eventSlice_ARBURST => grp_copyToPS_fu_202_m_axi_eventSlice_ARBURST,
        m_axi_eventSlice_ARLOCK => grp_copyToPS_fu_202_m_axi_eventSlice_ARLOCK,
        m_axi_eventSlice_ARCACHE => grp_copyToPS_fu_202_m_axi_eventSlice_ARCACHE,
        m_axi_eventSlice_ARPROT => grp_copyToPS_fu_202_m_axi_eventSlice_ARPROT,
        m_axi_eventSlice_ARQOS => grp_copyToPS_fu_202_m_axi_eventSlice_ARQOS,
        m_axi_eventSlice_ARREGION => grp_copyToPS_fu_202_m_axi_eventSlice_ARREGION,
        m_axi_eventSlice_ARUSER => grp_copyToPS_fu_202_m_axi_eventSlice_ARUSER,
        m_axi_eventSlice_RVALID => ap_const_logic_0,
        m_axi_eventSlice_RREADY => grp_copyToPS_fu_202_m_axi_eventSlice_RREADY,
        m_axi_eventSlice_RDATA => ap_const_lv8_0,
        m_axi_eventSlice_RLAST => ap_const_logic_0,
        m_axi_eventSlice_RID => ap_const_lv1_0,
        m_axi_eventSlice_RUSER => ap_const_lv1_0,
        m_axi_eventSlice_RRESP => ap_const_lv2_0,
        m_axi_eventSlice_BVALID => eventSlice_BVALID,
        m_axi_eventSlice_BREADY => grp_copyToPS_fu_202_m_axi_eventSlice_BREADY,
        m_axi_eventSlice_BRESP => eventSlice_BRESP,
        m_axi_eventSlice_BID => eventSlice_BID,
        m_axi_eventSlice_BUSER => eventSlice_BUSER,
        eventSlice_offset => eventSlice_offset,
        glPLSlices_0_address0 => grp_copyToPS_fu_202_glPLSlices_0_address0,
        glPLSlices_0_ce0 => grp_copyToPS_fu_202_glPLSlices_0_ce0,
        glPLSlices_0_q0 => glPLSlices_0_q0,
        glPLSlices_1_address0 => grp_copyToPS_fu_202_glPLSlices_1_address0,
        glPLSlices_1_ce0 => grp_copyToPS_fu_202_glPLSlices_1_ce0,
        glPLSlices_1_q0 => glPLSlices_1_q0,
        glPLSlices_2_address0 => grp_copyToPS_fu_202_glPLSlices_2_address0,
        glPLSlices_2_ce0 => grp_copyToPS_fu_202_glPLSlices_2_ce0,
        glPLSlices_2_q0 => glPLSlices_2_q0,
        glPLSlices_3_address0 => grp_copyToPS_fu_202_glPLSlices_3_address0,
        glPLSlices_3_ce0 => grp_copyToPS_fu_202_glPLSlices_3_ce0,
        glPLSlices_3_q0 => glPLSlices_3_q0);

    grp_resetCurrentSliceHW_fu_217 : component a0_resetCurrentSliceHW
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_resetCurrentSliceHW_fu_217_ap_start,
        ap_done => grp_resetCurrentSliceHW_fu_217_ap_done,
        ap_idle => grp_resetCurrentSliceHW_fu_217_ap_idle,
        ap_ready => grp_resetCurrentSliceHW_fu_217_ap_ready,
        glPLSlices_0_address0 => grp_resetCurrentSliceHW_fu_217_glPLSlices_0_address0,
        glPLSlices_0_ce0 => grp_resetCurrentSliceHW_fu_217_glPLSlices_0_ce0,
        glPLSlices_0_we0 => grp_resetCurrentSliceHW_fu_217_glPLSlices_0_we0,
        glPLSlices_0_d0 => grp_resetCurrentSliceHW_fu_217_glPLSlices_0_d0,
        glPLSlices_0_address1 => grp_resetCurrentSliceHW_fu_217_glPLSlices_0_address1,
        glPLSlices_0_ce1 => grp_resetCurrentSliceHW_fu_217_glPLSlices_0_ce1,
        glPLSlices_0_we1 => grp_resetCurrentSliceHW_fu_217_glPLSlices_0_we1,
        glPLSlices_0_d1 => grp_resetCurrentSliceHW_fu_217_glPLSlices_0_d1,
        glPLSlices_1_address0 => grp_resetCurrentSliceHW_fu_217_glPLSlices_1_address0,
        glPLSlices_1_ce0 => grp_resetCurrentSliceHW_fu_217_glPLSlices_1_ce0,
        glPLSlices_1_we0 => grp_resetCurrentSliceHW_fu_217_glPLSlices_1_we0,
        glPLSlices_1_d0 => grp_resetCurrentSliceHW_fu_217_glPLSlices_1_d0,
        glPLSlices_1_address1 => grp_resetCurrentSliceHW_fu_217_glPLSlices_1_address1,
        glPLSlices_1_ce1 => grp_resetCurrentSliceHW_fu_217_glPLSlices_1_ce1,
        glPLSlices_1_we1 => grp_resetCurrentSliceHW_fu_217_glPLSlices_1_we1,
        glPLSlices_1_d1 => grp_resetCurrentSliceHW_fu_217_glPLSlices_1_d1,
        glPLSlices_2_address0 => grp_resetCurrentSliceHW_fu_217_glPLSlices_2_address0,
        glPLSlices_2_ce0 => grp_resetCurrentSliceHW_fu_217_glPLSlices_2_ce0,
        glPLSlices_2_we0 => grp_resetCurrentSliceHW_fu_217_glPLSlices_2_we0,
        glPLSlices_2_d0 => grp_resetCurrentSliceHW_fu_217_glPLSlices_2_d0,
        glPLSlices_2_address1 => grp_resetCurrentSliceHW_fu_217_glPLSlices_2_address1,
        glPLSlices_2_ce1 => grp_resetCurrentSliceHW_fu_217_glPLSlices_2_ce1,
        glPLSlices_2_we1 => grp_resetCurrentSliceHW_fu_217_glPLSlices_2_we1,
        glPLSlices_2_d1 => grp_resetCurrentSliceHW_fu_217_glPLSlices_2_d1,
        glPLSlices_3_address0 => grp_resetCurrentSliceHW_fu_217_glPLSlices_3_address0,
        glPLSlices_3_ce0 => grp_resetCurrentSliceHW_fu_217_glPLSlices_3_ce0,
        glPLSlices_3_we0 => grp_resetCurrentSliceHW_fu_217_glPLSlices_3_we0,
        glPLSlices_3_d0 => grp_resetCurrentSliceHW_fu_217_glPLSlices_3_d0,
        glPLSlices_3_address1 => grp_resetCurrentSliceHW_fu_217_glPLSlices_3_address1,
        glPLSlices_3_ce1 => grp_resetCurrentSliceHW_fu_217_glPLSlices_3_ce1,
        glPLSlices_3_we1 => grp_resetCurrentSliceHW_fu_217_glPLSlices_3_we1,
        glPLSlices_3_d1 => grp_resetCurrentSliceHW_fu_217_glPLSlices_3_d1);

    parseEvents_urem_ibs_U18 : component a0_parseEvents_urem_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 19,
        din0_WIDTH => 15,
        din1_WIDTH => 7,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => x_cast_reg_467,
        din1 => grp_fu_365_p1,
        ce => grp_fu_365_ce,
        dout => grp_fu_365_p2);

    parseEvents_mux_4dEe_U19 : component a0_parseEvents_mux_4dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 16,
        dout_WIDTH => 8)
    port map (
        din0 => glPLSlices_0_q0,
        din1 => glPLSlices_1_q0,
        din2 => glPLSlices_2_q0,
        din3 => glPLSlices_3_q0,
        din4 => tmp_1_fu_423_p5,
        dout => tmp_1_fu_423_p6);

    parseEvents_mul_mjbC_U20 : component a0_parseEvents_mul_mjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 17,
        dout_WIDTH => 32)
    port map (
        din0 => mul_fu_447_p0,
        din1 => mul_fu_447_p1,
        dout => mul_fu_447_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((grp_resetCurrentSliceHW_fu_217_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                elsif (((grp_resetCurrentSliceHW_fu_217_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_copyToPS_fu_202_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_copyToPS_fu_202_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    grp_copyToPS_fu_202_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_copyToPS_fu_202_ap_ready = ap_const_logic_1)) then 
                    grp_copyToPS_fu_202_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_resetCurrentSliceHW_fu_217_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_resetCurrentSliceHW_fu_217_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_resetCurrentSliceHW_fu_217_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_resetCurrentSliceHW_fu_217_ap_ready = ap_const_logic_1)) then 
                    grp_resetCurrentSliceHW_fu_217_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_9_reg_463 = ap_const_lv1_0))) then 
                i_reg_190 <= i_2_reg_487;
            elsif (((grp_resetCurrentSliceHW_fu_217_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_reg_190 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_10_reg_473_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                glPLSlices_0_addr_reg_507 <= tmp_69_cast_fu_408_p1(15 - 1 downto 0);
                glPLSlices_1_addr_reg_512 <= tmp_69_cast_fu_408_p1(15 - 1 downto 0);
                glPLSlices_2_addr_reg_517 <= tmp_69_cast_fu_408_p1(15 - 1 downto 0);
                glPLSlices_3_addr_reg_522 <= tmp_69_cast_fu_408_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_9_reg_463 = ap_const_lv1_0))) then
                i_2_reg_487 <= i_2_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_10_reg_473 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_reg_492 <= mul_fu_447_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_10_reg_473_pp0_iter9_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                newIndex_i_reg_502 <= grp_fu_365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_9_reg_463 = ap_const_lv1_0))) then
                tmp_10_reg_473 <= data_dout(1 downto 1);
                x_cast_reg_467 <= data_dout(31 downto 17);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_10_reg_473_pp0_iter10_reg <= tmp_10_reg_473_pp0_iter9_reg;
                tmp_10_reg_473_pp0_iter1_reg <= tmp_10_reg_473;
                tmp_10_reg_473_pp0_iter2_reg <= tmp_10_reg_473_pp0_iter1_reg;
                tmp_10_reg_473_pp0_iter3_reg <= tmp_10_reg_473_pp0_iter2_reg;
                tmp_10_reg_473_pp0_iter4_reg <= tmp_10_reg_473_pp0_iter3_reg;
                tmp_10_reg_473_pp0_iter5_reg <= tmp_10_reg_473_pp0_iter4_reg;
                tmp_10_reg_473_pp0_iter6_reg <= tmp_10_reg_473_pp0_iter5_reg;
                tmp_10_reg_473_pp0_iter7_reg <= tmp_10_reg_473_pp0_iter6_reg;
                tmp_10_reg_473_pp0_iter8_reg <= tmp_10_reg_473_pp0_iter7_reg;
                tmp_10_reg_473_pp0_iter9_reg <= tmp_10_reg_473_pp0_iter8_reg;
                tmp_11_reg_477_pp0_iter1_reg <= tmp_11_reg_477;
                tmp_11_reg_477_pp0_iter2_reg <= tmp_11_reg_477_pp0_iter1_reg;
                tmp_11_reg_477_pp0_iter3_reg <= tmp_11_reg_477_pp0_iter2_reg;
                tmp_11_reg_477_pp0_iter4_reg <= tmp_11_reg_477_pp0_iter3_reg;
                tmp_11_reg_477_pp0_iter5_reg <= tmp_11_reg_477_pp0_iter4_reg;
                tmp_11_reg_477_pp0_iter6_reg <= tmp_11_reg_477_pp0_iter5_reg;
                tmp_11_reg_477_pp0_iter7_reg <= tmp_11_reg_477_pp0_iter6_reg;
                tmp_11_reg_477_pp0_iter8_reg <= tmp_11_reg_477_pp0_iter7_reg;
                tmp_11_reg_477_pp0_iter9_reg <= tmp_11_reg_477_pp0_iter8_reg;
                tmp_12_reg_482_pp0_iter1_reg <= tmp_12_reg_482;
                tmp_12_reg_482_pp0_iter2_reg <= tmp_12_reg_482_pp0_iter1_reg;
                tmp_12_reg_482_pp0_iter3_reg <= tmp_12_reg_482_pp0_iter2_reg;
                tmp_12_reg_482_pp0_iter4_reg <= tmp_12_reg_482_pp0_iter3_reg;
                tmp_12_reg_482_pp0_iter5_reg <= tmp_12_reg_482_pp0_iter4_reg;
                tmp_12_reg_482_pp0_iter6_reg <= tmp_12_reg_482_pp0_iter5_reg;
                tmp_12_reg_482_pp0_iter7_reg <= tmp_12_reg_482_pp0_iter6_reg;
                tmp_12_reg_482_pp0_iter8_reg <= tmp_12_reg_482_pp0_iter7_reg;
                tmp_12_reg_482_pp0_iter9_reg <= tmp_12_reg_482_pp0_iter8_reg;
                tmp_13_reg_497_pp0_iter10_reg <= tmp_13_reg_497_pp0_iter9_reg;
                tmp_13_reg_497_pp0_iter2_reg <= tmp_13_reg_497;
                tmp_13_reg_497_pp0_iter3_reg <= tmp_13_reg_497_pp0_iter2_reg;
                tmp_13_reg_497_pp0_iter4_reg <= tmp_13_reg_497_pp0_iter3_reg;
                tmp_13_reg_497_pp0_iter5_reg <= tmp_13_reg_497_pp0_iter4_reg;
                tmp_13_reg_497_pp0_iter6_reg <= tmp_13_reg_497_pp0_iter5_reg;
                tmp_13_reg_497_pp0_iter7_reg <= tmp_13_reg_497_pp0_iter6_reg;
                tmp_13_reg_497_pp0_iter8_reg <= tmp_13_reg_497_pp0_iter7_reg;
                tmp_13_reg_497_pp0_iter9_reg <= tmp_13_reg_497_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_10_fu_328_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_9_reg_463 = ap_const_lv1_0))) then
                tmp_11_reg_477 <= data_dout(11 downto 2);
                tmp_12_reg_482 <= data_dout(15 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_10_reg_473 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_13_reg_497 <= mul_reg_492(31 downto 21);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_resetCurrentSliceHW_fu_217_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_8_reg_458(31 downto 1) <= tmp_8_fu_305_p3(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_9_reg_463 <= tmp_9_fu_313_p2;
            end if;
        end if;
    end process;
    tmp_8_reg_458(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_state2, grp_resetCurrentSliceHW_fu_217_ap_done, tmp_9_fu_313_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, grp_copyToPS_fu_202_ap_done, ap_CS_fsm_state27)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_resetCurrentSliceHW_fu_217_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_9_fu_313_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_9_fu_313_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((grp_copyToPS_fu_202_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state26 <= ap_CS_fsm(4);
    ap_CS_fsm_state27 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(data_empty_n, ap_enable_reg_pp0_iter0, tmp_9_reg_463)
    begin
                ap_block_pp0_stage1_11001 <= ((data_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_9_reg_463 = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(data_empty_n, ap_enable_reg_pp0_iter0, tmp_9_reg_463)
    begin
                ap_block_pp0_stage1_subdone <= ((data_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_9_reg_463 = ap_const_lv1_0));
    end process;

        ap_block_state10_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage1_iter0_assign_proc : process(data_empty_n, tmp_9_reg_463)
    begin
                ap_block_state4_pp0_stage1_iter0 <= ((data_empty_n = ap_const_logic_0) and (tmp_9_reg_463 = ap_const_lv1_0));
    end process;

        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(tmp_9_fu_313_p2)
    begin
        if ((tmp_9_fu_313_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(grp_copyToPS_fu_202_ap_done, ap_CS_fsm_state27)
    begin
        if (((grp_copyToPS_fu_202_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_194_p4_assign_proc : process(tmp_9_reg_463, i_reg_190, ap_CS_fsm_pp0_stage0, i_2_reg_487, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_9_reg_463 = ap_const_lv1_0))) then 
            ap_phi_mux_i_phi_fu_194_p4 <= i_2_reg_487;
        else 
            ap_phi_mux_i_phi_fu_194_p4 <= i_reg_190;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_copyToPS_fu_202_ap_done, ap_CS_fsm_state27)
    begin
        if (((grp_copyToPS_fu_202_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

        arrayNo_i_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_reg_497_pp0_iter10_reg),15));


    data_blk_n_assign_proc : process(data_empty_n, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1, tmp_9_reg_463)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_9_reg_463 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            data_blk_n <= data_empty_n;
        else 
            data_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_read_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, tmp_9_reg_463, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_9_reg_463 = ap_const_lv1_0))) then 
            data_read <= ap_const_logic_1;
        else 
            data_read <= ap_const_logic_0;
        end if; 
    end process;


    eventSlice_AWVALID_assign_proc : process(grp_copyToPS_fu_202_m_axi_eventSlice_AWVALID, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            eventSlice_AWVALID <= grp_copyToPS_fu_202_m_axi_eventSlice_AWVALID;
        else 
            eventSlice_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    eventSlice_BREADY_assign_proc : process(grp_copyToPS_fu_202_m_axi_eventSlice_BREADY, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            eventSlice_BREADY <= grp_copyToPS_fu_202_m_axi_eventSlice_BREADY;
        else 
            eventSlice_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    eventSlice_WVALID_assign_proc : process(grp_copyToPS_fu_202_m_axi_eventSlice_WVALID, ap_CS_fsm_state26, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            eventSlice_WVALID <= grp_copyToPS_fu_202_m_axi_eventSlice_WVALID;
        else 
            eventSlice_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, glPLSlices_0_addr_reg_507, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, grp_copyToPS_fu_202_glPLSlices_0_address0, grp_resetCurrentSliceHW_fu_217_glPLSlices_0_address0, ap_block_pp0_stage0, ap_CS_fsm_state27, tmp_69_cast_fu_408_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_0_address0 <= glPLSlices_0_addr_reg_507;
        elsif (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            glPLSlices_0_address0 <= tmp_69_cast_fu_408_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glPLSlices_0_address0 <= grp_resetCurrentSliceHW_fu_217_glPLSlices_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            glPLSlices_0_address0 <= grp_copyToPS_fu_202_glPLSlices_0_address0;
        else 
            glPLSlices_0_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    glPLSlices_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, grp_copyToPS_fu_202_glPLSlices_0_ce0, grp_resetCurrentSliceHW_fu_217_glPLSlices_0_ce0, ap_CS_fsm_state27)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            glPLSlices_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glPLSlices_0_ce0 <= grp_resetCurrentSliceHW_fu_217_glPLSlices_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            glPLSlices_0_ce0 <= grp_copyToPS_fu_202_glPLSlices_0_ce0;
        else 
            glPLSlices_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_0_ce1_assign_proc : process(ap_CS_fsm_state2, grp_resetCurrentSliceHW_fu_217_glPLSlices_0_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glPLSlices_0_ce1 <= grp_resetCurrentSliceHW_fu_217_glPLSlices_0_ce1;
        else 
            glPLSlices_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_0_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter11, grp_resetCurrentSliceHW_fu_217_glPLSlices_0_d0, ap_block_pp0_stage0, tmp_3_i_fu_437_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_0_d0 <= tmp_3_i_fu_437_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glPLSlices_0_d0 <= grp_resetCurrentSliceHW_fu_217_glPLSlices_0_d0;
        else 
            glPLSlices_0_d0 <= "XXXXXXXX";
        end if; 
    end process;


    glPLSlices_0_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_10_reg_473_pp0_iter10_reg, ap_enable_reg_pp0_iter11, grp_resetCurrentSliceHW_fu_217_glPLSlices_0_we0, arrayNo_i_fu_416_p1)
    begin
        if (((arrayNo_i_fu_416_p1 = ap_const_lv15_0) and (tmp_10_reg_473_pp0_iter10_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_0_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glPLSlices_0_we0 <= grp_resetCurrentSliceHW_fu_217_glPLSlices_0_we0;
        else 
            glPLSlices_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_0_we1_assign_proc : process(ap_CS_fsm_state2, grp_resetCurrentSliceHW_fu_217_glPLSlices_0_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glPLSlices_0_we1 <= grp_resetCurrentSliceHW_fu_217_glPLSlices_0_we1;
        else 
            glPLSlices_0_we1 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, glPLSlices_1_addr_reg_512, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, grp_copyToPS_fu_202_glPLSlices_1_address0, grp_resetCurrentSliceHW_fu_217_glPLSlices_1_address0, ap_block_pp0_stage0, ap_CS_fsm_state27, tmp_69_cast_fu_408_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_1_address0 <= glPLSlices_1_addr_reg_512;
        elsif (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            glPLSlices_1_address0 <= tmp_69_cast_fu_408_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glPLSlices_1_address0 <= grp_resetCurrentSliceHW_fu_217_glPLSlices_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            glPLSlices_1_address0 <= grp_copyToPS_fu_202_glPLSlices_1_address0;
        else 
            glPLSlices_1_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    glPLSlices_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, grp_copyToPS_fu_202_glPLSlices_1_ce0, grp_resetCurrentSliceHW_fu_217_glPLSlices_1_ce0, ap_CS_fsm_state27)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            glPLSlices_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glPLSlices_1_ce0 <= grp_resetCurrentSliceHW_fu_217_glPLSlices_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            glPLSlices_1_ce0 <= grp_copyToPS_fu_202_glPLSlices_1_ce0;
        else 
            glPLSlices_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_1_ce1_assign_proc : process(ap_CS_fsm_state2, grp_resetCurrentSliceHW_fu_217_glPLSlices_1_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glPLSlices_1_ce1 <= grp_resetCurrentSliceHW_fu_217_glPLSlices_1_ce1;
        else 
            glPLSlices_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_1_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter11, grp_resetCurrentSliceHW_fu_217_glPLSlices_1_d0, ap_block_pp0_stage0, tmp_3_i_fu_437_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_1_d0 <= tmp_3_i_fu_437_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glPLSlices_1_d0 <= grp_resetCurrentSliceHW_fu_217_glPLSlices_1_d0;
        else 
            glPLSlices_1_d0 <= "XXXXXXXX";
        end if; 
    end process;


    glPLSlices_1_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_10_reg_473_pp0_iter10_reg, ap_enable_reg_pp0_iter11, grp_resetCurrentSliceHW_fu_217_glPLSlices_1_we0, arrayNo_i_fu_416_p1)
    begin
        if (((arrayNo_i_fu_416_p1 = ap_const_lv15_1) and (tmp_10_reg_473_pp0_iter10_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_1_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glPLSlices_1_we0 <= grp_resetCurrentSliceHW_fu_217_glPLSlices_1_we0;
        else 
            glPLSlices_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_1_we1_assign_proc : process(ap_CS_fsm_state2, grp_resetCurrentSliceHW_fu_217_glPLSlices_1_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glPLSlices_1_we1 <= grp_resetCurrentSliceHW_fu_217_glPLSlices_1_we1;
        else 
            glPLSlices_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, glPLSlices_2_addr_reg_517, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, grp_copyToPS_fu_202_glPLSlices_2_address0, grp_resetCurrentSliceHW_fu_217_glPLSlices_2_address0, ap_block_pp0_stage0, ap_CS_fsm_state27, tmp_69_cast_fu_408_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_2_address0 <= glPLSlices_2_addr_reg_517;
        elsif (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            glPLSlices_2_address0 <= tmp_69_cast_fu_408_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glPLSlices_2_address0 <= grp_resetCurrentSliceHW_fu_217_glPLSlices_2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            glPLSlices_2_address0 <= grp_copyToPS_fu_202_glPLSlices_2_address0;
        else 
            glPLSlices_2_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    glPLSlices_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, grp_copyToPS_fu_202_glPLSlices_2_ce0, grp_resetCurrentSliceHW_fu_217_glPLSlices_2_ce0, ap_CS_fsm_state27)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            glPLSlices_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glPLSlices_2_ce0 <= grp_resetCurrentSliceHW_fu_217_glPLSlices_2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            glPLSlices_2_ce0 <= grp_copyToPS_fu_202_glPLSlices_2_ce0;
        else 
            glPLSlices_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_2_ce1_assign_proc : process(ap_CS_fsm_state2, grp_resetCurrentSliceHW_fu_217_glPLSlices_2_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glPLSlices_2_ce1 <= grp_resetCurrentSliceHW_fu_217_glPLSlices_2_ce1;
        else 
            glPLSlices_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_2_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter11, grp_resetCurrentSliceHW_fu_217_glPLSlices_2_d0, ap_block_pp0_stage0, tmp_3_i_fu_437_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_2_d0 <= tmp_3_i_fu_437_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glPLSlices_2_d0 <= grp_resetCurrentSliceHW_fu_217_glPLSlices_2_d0;
        else 
            glPLSlices_2_d0 <= "XXXXXXXX";
        end if; 
    end process;


    glPLSlices_2_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_10_reg_473_pp0_iter10_reg, ap_enable_reg_pp0_iter11, grp_resetCurrentSliceHW_fu_217_glPLSlices_2_we0, arrayNo_i_fu_416_p1)
    begin
        if (((arrayNo_i_fu_416_p1 = ap_const_lv15_2) and (tmp_10_reg_473_pp0_iter10_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_2_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glPLSlices_2_we0 <= grp_resetCurrentSliceHW_fu_217_glPLSlices_2_we0;
        else 
            glPLSlices_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_2_we1_assign_proc : process(ap_CS_fsm_state2, grp_resetCurrentSliceHW_fu_217_glPLSlices_2_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glPLSlices_2_we1 <= grp_resetCurrentSliceHW_fu_217_glPLSlices_2_we1;
        else 
            glPLSlices_2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_3_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, glPLSlices_3_addr_reg_522, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, grp_copyToPS_fu_202_glPLSlices_3_address0, grp_resetCurrentSliceHW_fu_217_glPLSlices_3_address0, ap_block_pp0_stage0, ap_CS_fsm_state27, tmp_69_cast_fu_408_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_3_address0 <= glPLSlices_3_addr_reg_522;
        elsif (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            glPLSlices_3_address0 <= tmp_69_cast_fu_408_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glPLSlices_3_address0 <= grp_resetCurrentSliceHW_fu_217_glPLSlices_3_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            glPLSlices_3_address0 <= grp_copyToPS_fu_202_glPLSlices_3_address0;
        else 
            glPLSlices_3_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    glPLSlices_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, grp_copyToPS_fu_202_glPLSlices_3_ce0, grp_resetCurrentSliceHW_fu_217_glPLSlices_3_ce0, ap_CS_fsm_state27)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            glPLSlices_3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glPLSlices_3_ce0 <= grp_resetCurrentSliceHW_fu_217_glPLSlices_3_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            glPLSlices_3_ce0 <= grp_copyToPS_fu_202_glPLSlices_3_ce0;
        else 
            glPLSlices_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_3_ce1_assign_proc : process(ap_CS_fsm_state2, grp_resetCurrentSliceHW_fu_217_glPLSlices_3_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glPLSlices_3_ce1 <= grp_resetCurrentSliceHW_fu_217_glPLSlices_3_ce1;
        else 
            glPLSlices_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_3_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter11, grp_resetCurrentSliceHW_fu_217_glPLSlices_3_d0, ap_block_pp0_stage0, tmp_3_i_fu_437_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_3_d0 <= tmp_3_i_fu_437_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glPLSlices_3_d0 <= grp_resetCurrentSliceHW_fu_217_glPLSlices_3_d0;
        else 
            glPLSlices_3_d0 <= "XXXXXXXX";
        end if; 
    end process;


    glPLSlices_3_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_10_reg_473_pp0_iter10_reg, ap_enable_reg_pp0_iter11, grp_resetCurrentSliceHW_fu_217_glPLSlices_3_we0, arrayNo_i_fu_416_p1)
    begin
        if ((not((arrayNo_i_fu_416_p1 = ap_const_lv15_2)) and not((arrayNo_i_fu_416_p1 = ap_const_lv15_1)) and not((arrayNo_i_fu_416_p1 = ap_const_lv15_0)) and (tmp_10_reg_473_pp0_iter10_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            glPLSlices_3_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glPLSlices_3_we0 <= grp_resetCurrentSliceHW_fu_217_glPLSlices_3_we0;
        else 
            glPLSlices_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    glPLSlices_3_we1_assign_proc : process(ap_CS_fsm_state2, grp_resetCurrentSliceHW_fu_217_glPLSlices_3_we1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            glPLSlices_3_we1 <= grp_resetCurrentSliceHW_fu_217_glPLSlices_3_we1;
        else 
            glPLSlices_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_copyToPS_fu_202_ap_start <= grp_copyToPS_fu_202_ap_start_reg;

    grp_fu_365_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_365_ce <= ap_const_logic_1;
        else 
            grp_fu_365_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_365_p1 <= ap_const_lv15_3C(7 - 1 downto 0);
    grp_resetCurrentSliceHW_fu_217_ap_start <= grp_resetCurrentSliceHW_fu_217_ap_start_reg;
    i_2_fu_356_p2 <= std_logic_vector(unsigned(i_reg_190) + unsigned(ap_const_lv32_2));
    mul_fu_447_p0 <= mul_fu_447_p00(15 - 1 downto 0);
    mul_fu_447_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_cast_reg_467),32));
    mul_fu_447_p1 <= ap_const_lv32_8889(17 - 1 downto 0);
    newIndex1_i_cast_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex_i_reg_502),16));
    p_lshr_fu_263_p4 <= p_neg_fu_257_p2(31 downto 1);
    p_neg_fu_257_p2 <= (tmp_fu_229_p2 xor ap_const_lv32_FFFFFFFF);
    p_neg_t_fu_273_p2 <= std_logic_vector(unsigned(ap_const_lv31_0) - unsigned(p_lshr_fu_263_p4));
    p_shl3_cast_fu_386_p3 <= (tmp_12_reg_482_pp0_iter9_reg & ap_const_lv2_0);
    p_shl_cast_fu_379_p3 <= (tmp_11_reg_477_pp0_iter9_reg & ap_const_lv6_0);
    tmp_10_fu_328_p3 <= data_dout(1 downto 1);
    tmp_1_fu_423_p5 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(arrayNo_i_fu_416_p1),16));
    tmp_3_fu_235_p3 <= eventsArraySize(30 downto 30);
    tmp_3_i_fu_437_p2 <= std_logic_vector(unsigned(tmp_1_fu_423_p6) + unsigned(ap_const_lv8_1));
    tmp_4_fu_249_p3 <= tmp_op_op9_fu_243_p2(31 downto 31);
    tmp_5_fu_279_p4 <= tmp_op_op9_fu_243_p2(31 downto 1);
    tmp_62_fu_402_p2 <= std_logic_vector(unsigned(newIndex1_i_cast_fu_399_p1) + unsigned(tmp_s_fu_393_p2));
        tmp_69_cast_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_62_fu_402_p2),32));

    tmp_6_fu_289_p3 <= 
        p_neg_t_fu_273_p2 when (tmp_4_fu_249_p3(0) = '1') else 
        tmp_5_fu_279_p4;
    tmp_7_fu_297_p3 <= 
        ap_const_lv31_0 when (tmp_3_fu_235_p3(0) = '1') else 
        tmp_6_fu_289_p3;
    tmp_8_fu_305_p3 <= (tmp_7_fu_297_p3 & ap_const_lv1_0);
    tmp_9_fu_313_p2 <= "1" when (ap_phi_mux_i_phi_fu_194_p4 = tmp_8_reg_458) else "0";
    tmp_fu_229_p2 <= std_logic_vector(shift_left(unsigned(eventsArraySize),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_op_op9_fu_243_p2 <= (tmp_fu_229_p2 or ap_const_lv32_1);
    tmp_s_fu_393_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_379_p3) - unsigned(p_shl3_cast_fu_386_p3));
end behav;
